[{"path":"https://hardin47.github.io/sicegar/articles/additional_parameters.html","id":"additional-parameters-for-the-sigmoidal-model","dir":"Articles","previous_headings":"","what":"Additional parameters for the sigmoidal model","title":"Calculation of additional parameters of interest","text":"following parameters calculated parameterCalculation() sigmoidal model. 1. Maximum fitted curve. maximum_x: x value (.e., time) fitted curve reaches maximum value. nature sigmoidal function value always equal infinity, output always NA sigmoidal model. maximum_y: maximum intensity fitted curve reaches infinity. value equal maximum_Estimate. 2. Midpoint fitted curve. point slope maximal intensity half maximum intensity. midPoint_x: x value (.e., time) fitted curve reaches midpoint. value equal midPoint_Estimate. midPoint_y: intensity midpoint. value equal maximum_y / 2. 3. Slope fitted curve. slope: maximum slope fitted curve. slope midpoint. value equal slopeParam_Estimate * maximum_y / 4. 4. Parameters related slope tangent, tangent line passes midpoint curve. incrementTime: time interval slope tangent intersects horizontal line defined y = 0 intersects horizontal line defined y = maximum_y. value equal maximum_y / slope. startPoint_x: x value (.e., time) start point. start point defined point slope tangent intersects y = 0. approximately represents moment time intensity signal first appears. value equal midPoint_x - (incrementTime/2). startPoint_y: intensity start point. Equals zero definition. reachMaximum_x: x value (.e., time) reach maximum point. reach maximum point defined point slope tangent intersects y = maximum_y. approximately represents moment time intensity signal reaches maximum. value equal midPoint_x + (incrementTime/2). reachMaximum_y: intensity reach maximum point. Equals maximum_y definition.","code":""},{"path":"https://hardin47.github.io/sicegar/articles/additional_parameters.html","id":"additional-parameters-for-the-double-sigmoidal-model","dir":"Articles","previous_headings":"","what":"Additional parameters for the double-sigmoidal model","title":"Calculation of additional parameters of interest","text":"1. Maximum fitted curve. maximum_x: x value (.e., time) fitted curve reaches maximum value. Umut, value calculated? maximum_y: maximum intensity fitted curve reaches infinity. value equal maximum_Estimate. Umut, correct? 2. Final asymptote intensity fitted model finalAsymptoteIntensity: intensity fitted curve reaches asymptotically infinite time. value equal finalAsymptoteIntensityRatio_Estimate * maximum_y. 3. First midpoint fitted curve. point intensity first reaches half maximum. midPoint1_x: x value (.e., time) fitted curve reaches first midpoint. value calculated numerically different midPoint1Param_Estimate. midPoint1_y: intensity first midpoint. value equal maximum_y / 2. 4. Second midpoint fitted curve. point intensity decreases halfway maximum final asymptotic value. midPoint2_x: x value (.e., time) fitted curve reaches second midpoint. value calculated numerically different midPoint2Param_Estimate. midPoint2_y: intensity second midpoint. value equal finalAsymptoteIntensity + (maximum_y - finalAsymptoteIntensity) / 2. 5. Slopes fitted curve. slope1: slope fitted curve first midpoint. value calculated numerically different slope1Param_Estimate. slope2: slope fitted model second midpoint. value calculated numerically different slope2Param_Estimate. 6. Parameters related first slope tangent, tangent line passes first midpoint curve. incrementTime: time interval first slope tangent intersects horizontal line defined y = 0 intersects horizontal line defined y = maximum_y. value equal maximum_y / slope. startPoint_x: x value (.e., time) start point. start point defined point first slope tangent intersects y = 0. approximately represents moment time intensity signal first appears. value equal midPoint1_x - (incrementTime/2). startPoint_y: intensity start point. Equals zero definition. reachMaximum_x: x value (.e., time) reach maximum point. reach maximum point defined point fist slope tangent intersects y = maximum_y. approximately represents moment time intensity signal reaches maximum. value equal midPoint_x + (incrementTime/2). reachMaximum_y: intensity reach maximum point. Equals maximum_y definition. 7. Parameters related second slope tangent, tangent line passes second midpoint curve. decrementTime: time interval second slope tangent intersects horizontal line defined y = maximum_y intersects horizontal line defined y = finalAsymptoteIntensity. value equal - (maximum_y -finalAsymptoteIntensity)/ slope2. startDeclinePoint_x: x value (.e., time) start decline point. start decline point defined point second slope tangent intersects y = maximum_y. approximately represents moment time intensity signal starts drop maximum value. value equal midPoint2_x - (decrementTime/2). startDeclinePoint_y: intensity start decline point. Equals maximum_y definition. endDeclinePoint_x: x value (.e., time) end decline point. end decline point defined point second slope tangent intersects y = finalAsymptoteIntensity. approximately represents moment time intensity signal reaches final asymptotic intensity. value equal midPoint2_x + (decrementTime/2). endDeclinePoint_y: intensity end decline point. Equals finalAsymptoteIntensity definition.","code":""},{"path":"https://hardin47.github.io/sicegar/articles/categorizing_fits.html","id":"the-decision-process","dir":"Articles","previous_headings":"","what":"The decision process","title":"Identifying the best-fitting model category","text":"decision process consists two parts. First, categorize() function checks whether provided input data valid. steps verification follows: Pre-test 0: categorize() function provided sigmoidal double_sigmoidal models input? Pre-test 1: provided sigmoidal double sigmoidal models come source data name? Pre-test 2a: provided sigmoidal model generated sicegar::sigmoidalFitFunctions? Pre-test 2b: provided double_sigmoidal model generated sicegar::doublesigmoidalFitFunctions? Pre-test 3: models scaling parameters obtained data normalization process? Pre-test 4a: additional parameters sigmoidal fit calculated sicegar::parameterCalculation()? Pre-test 4b: additional parameters double-sigmoidal fit calculated sicegar::parameterCalculation()? steps, primary decision process begins. takes list four possible outcomes (“no_signal”, “sigmoidal”, “double_sigmoidal”, “ambiguous”) systematically removes options one remains. First, algorithm checks provided data includes signal . Test 1a: observed intensity maximum must bigger threshold_minimum_for_intensity_maximum; otherwise, data labeled \"no_signal\". Test 1b: intensity range, .e., absolute difference biggest smallest observed intensity, must greater threshold_intensity_range; otherwise, data labeled \"no_signal\". Test 1c: point data labeled \"no_signal\", data can labeled \"signal\" anymore. Next algorithm checks sigmoidal double sigmoidal models make sense. Test 2a: provided sigmoidal fit must successful fit; otherwise, data labeled \"sigmoidal\". Test 2b: provided double-sigmoidal fit must successful fit; otherwise, data labelled \"double_sigmoidal\". Test 3a: sigmoidal fit must AIC score smaller threshold_AIC; otherwise, data can labeled \"sigmoidal\". Test 3b: double-sigmoidal fit must AIC score smaller threshold_AIC; otherwise, data labeled \"double_sigmoidal\". Test 4a: value startPoint_x sigmoidal model must positive number; otherwise, data labeled \"sigmoidal\". Test 4b: value startPoint_x double-sigmoidal model must positive number; otherwise, data labeled \"double_sigmoidal\". Test 5a: value start_intensity sigmoidal model must smaller threshold_t0_max_int; otherwise, data labeled \"sigmoidal\". Test 5b: value start_intensity double-sigmoidal model must smaller threshold_t0_max_int; otherwise, data labeled \"double_sigmoidal\". Test 6: double-sigmoidal model, ratio /model’s intensity prediction last observation time/ /model’s maximum intensity prediction/ must smaller threshold_dsm_tmax_IntensityRatio; otherwise, data labeled \"double_sigmoidal\". Test 7: sigmoidal model; ratio /model’s intensity prediction last observation time/ /model’s maximum intensity prediction/ must larger threshold_sm_tmax_IntensityRatio; otherwise, data labeled \"sigmoidal\". step eight, algorithm checks whether data labelled \"ambiguous\" . Test 8: point still least one two options \"sigmoidal\" \"double_sigmoidal\", data labeled \"ambiguous\". last step; algorithm checks whether data labeled \"sigmoidal\" \"double_sigmoidal\". Test 9: point still \"sigmoidal\" \"double_sigmoidal\" options, choice made based AIC scores models value threshold_bonus_sigmoidal_AIC. sigmoidalAIC + threshold_bonus_sigmoidal_AIC  <  doublesigmoidalAIC, data labeled \"double_sigmoidal\". sigmoidalAIC + threshold_bonus_sigmoidal_AIC  >  doublesigmoidalAIC, data labeled \"sigmoidal\". option left point label data thus final decision.","code":""},{"path":"https://hardin47.github.io/sicegar/articles/fitting_individual_models.html","id":"fitting-the-models-to-the-data","dir":"Articles","previous_headings":"","what":"Fitting the models to the data","title":"Fitting individual models","text":"fit model data using function multipleFitFunction(), provide input normalized data model type fitted, can \"sigmoidal\" \"doublesigmoidal\". fitting models input data: two generated model objects contain large number computed parameters, described detail following. calculated quantities can grouped several different groups parameters: 1. Information fitting process model: String indicating type model, \"sigmoidal\" sigmoidal model \"doublesigmoidal\" double-sigmoidal model. isThisaFit: boolean equals TRUE least one fit successful FALSE otherwise. betterFit: number times minimum AIC score improved subsequent fitting attempt. words, counts number times multiple fit attempts increased fit quality. correctFit: total number successfull fits. totalFit: total number fit attempts. 2. Estimates fitted parameters estimates converted normalized data original raw data, main quantities interest user. depend type model, sigmoidal vs. double-sigmoidal. Estimates sigmoidal model : maximum_Estimate: Maximum intensity estimate raw data. slopeParam_Estimate: Slope parameter estimate raw data. Note slope parameter related equal slope. See vignette additional parameters details. midPoint_Estimate: Mid-point estimate (time intensity reaches 1/2 maximum) raw data. Estimates double-sigmoidal model : maximum_Estimate: Maximum intensity estimate raw data. slope1Param_Estimate: Slope 1 parameter estimate raw data. Note slope 1 parameter related equal slope. See vignette additional parameters details. midPoint1Param_Estimate: Mid-point 1 estimate (time intensity reaches 1/2 maximum) raw data. Needs numerical correction. See vignette additional parameters details. slope2Param_Estimate: Slope 2 parameter estimate raw data. Note slope 2 parameter related equal slope. See vignette additional parameters details. midPointDistanceParam_Estimate: Distance mid-point 1 mid-point 2, mid-point 2 time intensity decreases mean final asymptote intensity maximum value. Needs numerical correction. See vignette additional parameters details. finalAsymptoteIntensityRatio_Estimate: ratio asymptote intensity maximum intensity fitted curve. 3. Quantities measuring overall quality fit residual_Sum_of_Squares: Residual sum squares, smaller values indicate better fit. log_likelihood: Negative log likelihood, larger values indicate better fit. AIC_value: Akaike Information Criterion, smaller values indicate better fit. BIC_value: Bayesian Information Criterion, smaller values indicate better fit. 4. Start point gradient descent algorithm time fit attempted, likelihood maximization algorithm starts random initiation point finds final parameter estimates gradient descent. start vector best fit returned form variables whose name starts startVector., followed name estimated parameter. example: startVector.maximum: Value maximum parameter initiation point. 5. Parameters related normalization step dataScalingParameters.timeRange: Maximum raw time data. dataScalingParameters.intensityMin: Minimum raw intensity data. dataScalingParameters.intensityMax: Maximum raw intensity data. dataScalingParameters.intensityRange: Maximum - Minimum intensity data. 6. Error estimates fitted parameters estimated parameter listed point 2, algorithm provides additional statistical parameters, estimate normalized scale, standard error (also normalized scale), t value, P value. example, maximum estimate, : maximum_N_Estimate: Estimate normalized scale. maximum_Std_Error: Standard error, normalized scale. maximum_t_value: t value maximum_Pr_t: P value","code":"# Do the sigmoidal fit sigmoidalModel <- multipleFitFunction(dataInput=normalizedInput,                                       model=\"sigmoidal\")   # Do the double-sigmoidal fit doubleSigmoidalModel <- multipleFitFunction(dataInput=normalizedInput,                                             model=\"doublesigmoidal\") t(sigmoidalModel) ##                                      [,1]                    ## maximum_N_Estimate                   \"0.600357\"              ## maximum_Std_Error                    \"0.04360717\"            ## maximum_t_value                      \"13.76739\"              ## maximum_Pr_t                         \"1.488936e-17\"          ## slopeParam_N_Estimate                \"45.36605\"              ## slopeParam_Std_Error                 \"40.28309\"              ## slopeParam_t_value                   \"1.126181\"              ## slopeParam_Pr_t                      \"0.266194\"              ## midPoint_N_Estimate                  \"0.2471276\"             ## midPoint_Std_Error                   \"0.02234585\"            ## midPoint_t_value                     \"11.05922\"              ## midPoint_Pr_t                        \"2.735935e-14\"          ## residual_Sum_of_Squares              \"2.741213\"              ## log_likelihood                       \"0.09094283\"            ## AIC_value                            \"7.818114\"              ## BIC_value                            \"15.2187\"               ## isThisaFit                           \"TRUE\"                  ## startVector.maximum                  \"0.6043553\"             ## startVector.slopeParam               \"169.1367\"              ## startVector.midPoint                 \"0.7339959\"             ## dataScalingParameters.timeRange      \"24\"                    ## dataScalingParameters.intensityMin   \"0.06066447\"            ## dataScalingParameters.intensityMax   \"4.13121\"               ## dataScalingParameters.intensityRange \"4.070545\"              ## model                                \"sigmoidal\"             ## additionalParameters                 \"FALSE\"                 ## maximum_Estimate                     \"2.504445\"              ## slopeParam_Estimate                  \"1.890252\"              ## midPoint_Estimate                    \"5.931063\"              ## dataInputName                        \"doubleSigmoidalSample\" ## betterFit                            \"2\"                     ## correctFit                           \"20\"                    ## totalFit                             \"22\" t(doubleSigmoidalModel) ##                                          [,1]                    ## finalAsymptoteIntensityRatio_N_Estimate  \"0.3091623\"             ## finalAsymptoteIntensityRatio_Std_Error   \"0.004685174\"           ## finalAsymptoteIntensityRatio_t_value     \"65.98736\"              ## finalAsymptoteIntensityRatio_Pr_t        \"2.989383e-43\"          ## maximum_N_Estimate                       \"1.001133\"              ## maximum_Std_Error                        \"0.005667711\"           ## maximum_t_value                          \"176.638\"               ## maximum_Pr_t                             \"1.030623e-60\"          ## slope1Param_N_Estimate                   \"23.57421\"              ## slope1Param_Std_Error                    \"0.6474785\"             ## slope1Param_t_value                      \"36.40926\"              ## slope1Param_Pr_t                         \"7.592734e-33\"          ## midPoint1Param_N_Estimate                \"0.2913237\"             ## midPoint1Param_Std_Error                 \"0.001503891\"           ## midPoint1Param_t_value                   \"193.7132\"              ## midPoint1Param_Pr_t                      \"2.354742e-62\"          ## slope2Param_N_Estimate                   \"25.18958\"              ## slope2Param_Std_Error                    \"1.072719\"              ## slope2Param_t_value                      \"23.482\"                ## slope2Param_Pr_t                         \"2.143509e-25\"          ## midPointDistanceParam_N_Estimate         \"0.3313872\"             ## midPointDistanceParam_Std_Error          \"0.002977952\"           ## midPointDistanceParam_t_value            \"111.2803\"              ## midPointDistanceParam_Pr_t               \"1.671408e-52\"          ## residual_Sum_of_Squares                  \"0.008190615\"           ## log_likelihood                           \"136.7004\"              ## AIC_value                                \"-259.4007\"             ## BIC_value                                \"-246.4497\"             ## isThisaFit                               \"TRUE\"                  ## startVector.finalAsymptoteIntensityRatio \"0.005354657\"           ## startVector.maximum                      \"0.8414437\"             ## startVector.slope1Param                  \"75.58825\"              ## startVector.midPoint1Param               \"0.4696522\"             ## startVector.slope2Param                  \"144.4035\"              ## startVector.midPointDistanceParam        \"0.3542918\"             ## dataScalingParameters.timeRange          \"24\"                    ## dataScalingParameters.intensityMin       \"0.06066447\"            ## dataScalingParameters.intensityMax       \"4.13121\"               ## dataScalingParameters.intensityRange     \"4.070545\"              ## model                                    \"doublesigmoidal\"       ## additionalParameters                     \"FALSE\"                 ## finalAsymptoteIntensityRatio_Estimate    \"0.3091623\"             ## maximum_Estimate                         \"4.135822\"              ## slope1Param_Estimate                     \"0.9822589\"             ## midPoint1Param_Estimate                  \"6.991768\"              ## slope2Param_Estimate                     \"1.049566\"              ## midPointDistanceParam_Estimate           \"7.953293\"              ## dataInputName                            \"doubleSigmoidalSample\" ## betterFit                                \"3\"                     ## correctFit                               \"20\"                    ## totalFit                                 \"42\""},{"path":"https://hardin47.github.io/sicegar/articles/h0_functions.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Allowing the lower asymptote parameter to vary freely","text":"may situations want estimate lower asymptote h0h_0 freely model rather assuming always starts zero, sicegar assumes default. purpose, functions fitAndCategorize() figureModelCurves() contain argument use_h0 (default value set FALSE). Setting argument TRUE results process usual, utilizing functions ending _h0 instead default counterparts. example, functions multipleFitFunction(), doublesigmoidalFitFormula(), parameterCalculation(), normalizeData() _h0 counterparts, multipleFitFunction_h0(), doublesigmoidalFitFormula_h0(), parameterCalculation_h0(), normalizeData_h0(). demonstrate differences letting h0h_0 estimated freely assuming fixed zero, first generating data h0h_0 zero:","code":"time <- seq(1, 24, 0.5) noise_parameter <- 0.2 intensity_noise <- runif(n = length(time), min = 0, max = 1) * noise_parameter intensity <- doubleSigmoidalFitFormula_h0(time,                                        finalAsymptoteIntensityRatio = .3,                                        maximum = 10,                                        slope1Param = 1,                                        midPoint1Param = 7,                                        slope2Param = 1,                                        midPointDistanceParam = 8,                                        h0 = 2) intensity <- intensity + intensity_noise dataInput <- data.frame(time, intensity) ggplot(dataInput, aes(time, intensity)) +    geom_point() +    scale_y_continuous(limits = c(0, 12), expand = expansion(mult = c(0, 0))) +    theme_bw()"},{"path":"https://hardin47.github.io/sicegar/articles/h0_functions.html","id":"fitting-the-models-to-the-data","dir":"Articles","previous_headings":"","what":"Fitting the models to the data","title":"Allowing the lower asymptote parameter to vary freely","text":"fitAndCategorize() can applied data, first default arguments second setting argument use_h0 TRUE: Using figureModelCurves(), can visualize differences using default arguments letting h0h_0 freely estimated.  clear situation, using default arguments result worse fit h0h_0 allowed estimated freely.","code":"fitObj_zero <- fitAndCategorize(dataInput,                            threshold_minimum_for_intensity_maximum = 0.3,                            threshold_intensity_range = 0.1,                            threshold_t0_max_int = 0.05,                            use_h0 = FALSE)   # Default  fitObj_free <- fitAndCategorize(dataInput,                            threshold_minimum_for_intensity_maximum = 0.3,                            threshold_intensity_range = 0.1,                            threshold_t0_max_int = 0.05,                            use_h0 = TRUE) # Double-sigmoidal fit with parameter related lines fig_a <- figureModelCurves(dataInput = fitObj_zero$normalizedInput,                                   doubleSigmoidalFitVector = fitObj_zero$doubleSigmoidalModel,                                   showParameterRelatedLines = TRUE,                                   use_h0 = FALSE)   # Default  fig_b <- figureModelCurves(dataInput = fitObj_free$normalizedInput,                                   doubleSigmoidalFitVector = fitObj_free$doubleSigmoidalModel,                                   showParameterRelatedLines = TRUE,                                   use_h0 = TRUE)  plot_grid(fig_a, fig_b, ncol = 2) # function from the cowplot package"},{"path":"https://hardin47.github.io/sicegar/articles/h0_functions.html","id":"model-fitting-components-h_0-free","dir":"Articles","previous_headings":"","what":"Model fitting components (h0h_0 free)","title":"Allowing the lower asymptote parameter to vary freely","text":"fit plot individual models using freely estimated h0h_0, must directly call _h0 counterparts sicegar function. already generated data (h0=2h_0 = 2), now can normalize data. can now call multipleFitFunction_h0() data fitted, calculating additional parameters using parameterCalculation_h0(): Now obtained fit, can use figureModelCurves() plot :","code":"normalizedInput_free <- normalizeData_h0(dataInput = dataInput,                                   dataInputName = \"doubleSigmoidalSample\") head(normalizedInput_free$timeIntensityData) # the normalized time and intensity data ##         time   intensity ## 1 0.04166667 0.009226536 ## 2 0.06250000 0.008663863 ## 3 0.08333333 0.005118997 ## 4 0.10416667 0.000000000 ## 5 0.12500000 0.011497350 ## 6 0.14583333 0.020499679 # Fit the double-sigmoidal model doubleSigmoidalModel_free <- multipleFitFunction_h0(dataInput=normalizedInput_free,                                             model=\"doublesigmoidal\")  doubleSigmoidalModel_free <- parameterCalculation_h0(doubleSigmoidalModel_free) # double-sigmoidal fit figureModelCurves(dataInput = normalizedInput_free,                   doubleSigmoidalFitVector = doubleSigmoidalModel_free,                   showParameterRelatedLines = TRUE,                   use_h0 = TRUE)"},{"path":"https://hardin47.github.io/sicegar/articles/h0_functions.html","id":"model-parameters","dir":"Articles","previous_headings":"","what":"Model parameters","title":"Allowing the lower asymptote parameter to vary freely","text":"Recall original model parameters (generated data) given finalAsymptoteIntensityRatio = 0.3, maximum = 10, slope1Param = 1, midPoint1Param = 7, slope2Param = 1, midPointDistanceParam = 8, h0 = 2. can recover parameter estimates doubleSigmoidalModel objects created . fitObj_zero return value h0h_0 (part estimation process). rest parameter values nearly identical, models h0=0h_0 = 0 fundamentally different models h0≠0h_0 \\ne 0.","code":"fitObj_zero$doubleSigmoidalModel |>   select(finalAsymptoteIntensityRatio_Estimate, maximum_Estimate, slope1Param_Estimate, midPoint1Param_Estimate,          slope2Param_Estimate, midPointDistanceParam_Estimate) |>    c() ## $finalAsymptoteIntensityRatio_Estimate ## [1] 0.1264636 ##  ## $maximum_Estimate ## [1] 10.13 ##  ## $slope1Param_Estimate ## [1] 1.007482 ##  ## $midPoint1Param_Estimate ## [1] 7.006687 ##  ## $slope2Param_Estimate ## [1] 1.021521 ##  ## $midPointDistanceParam_Estimate ## [1] 7.976228 fitObj_free$doubleSigmoidalModel |>   select(finalAsymptoteIntensityRatio_Estimate, maximum_Estimate, slope1Param_Estimate, midPoint1Param_Estimate,          slope2Param_Estimate, midPointDistanceParam_Estimate, h0_Estimate) |> c() ## $finalAsymptoteIntensityRatio_Estimate ## [1] 0.3080899 ##  ## $maximum_Estimate ## [1] 10.13 ##  ## $slope1Param_Estimate ## [1] 1.007482 ##  ## $midPoint1Param_Estimate ## [1] 7.006687 ##  ## $slope2Param_Estimate ## [1] 1.021521 ##  ## $midPointDistanceParam_Estimate ## [1] 7.976228 ##  ## $h0_Estimate ## [1] 2.106237"},{"path":"https://hardin47.github.io/sicegar/articles/introduction.html","id":"example-fit-on-simulated-input-data","dir":"Articles","previous_headings":"","what":"Example fit on simulated input data","title":"Introduction","text":"input fitting function must form data frame two columns called time intensity. use double-sigmoidal data generated arbitrarily chosen parameters. can use function doublesigmoidalFitFormula() generate double-sigmoidal curve, add random noise.  can now fit two models data determine better fit. done function fitAndCategorize(). three provided threshold parameters used categorization process depend units data measured. See vignette categorizing fits details. two fitted curves can visualized function figureModelCurves(), returns ggplot2 plot.  Clearly regular sigmoidal curve provide good fit double-sigmoidal curve . information available returned fit object:","code":"time <- seq(1, 24, 0.5) noise_parameter <- 0.2 intensity_noise <- runif(n = length(time), min = 0, max = 1) * noise_parameter intensity <- doublesigmoidalFitFormula(time,                                     finalAsymptoteIntensityRatio = .3,                                     maximum = 4,                                     slope1Param = 1,                                     midPoint1Param = 7,                                     slope2Param = 1,                                     midPointDistanceParam = 8) intensity <- intensity+intensity_noise dataInput <- data.frame(time, intensity)  ggplot(dataInput, aes(time, intensity)) + geom_point() + theme_bw() fitObj <- fitAndCategorize(dataInput,                            threshold_minimum_for_intensity_maximum = 0.3,                            threshold_intensity_range = 0.1,                            threshold_t0_max_int = 0.05) # Double-sigmoidal fit with parameter related lines fig_a <- figureModelCurves(dataInput = fitObj$normalizedInput,                                   sigmoidalFitVector = fitObj$sigmoidalModel,                                   showParameterRelatedLines = TRUE)  fig_b <- figureModelCurves(dataInput = fitObj$normalizedInput,                                   doubleSigmoidalFitVector = fitObj$doubleSigmoidalModel,                                   showParameterRelatedLines = TRUE)  plot_grid(fig_a, fig_b, ncol = 2) # function from the cowplot package fitObj$decisionProcess$decision # final decision ## [1] \"double_sigmoidal\""},{"path":"https://hardin47.github.io/sicegar/articles/introduction.html","id":"the-fit-object","dir":"Articles","previous_headings":"","what":"The fit object","title":"Introduction","text":"fit object returned fitAndCategorize() contains information potentially interest course type analysis. consists five distinct components: component holds numerous parameters interest: .$normalizedInput: normalized dataset normalization parameters, raw dataset can recovered normalized one. information, see vignette fitting individual models. .$sigmoidalModel: parameters sigmoidal fit. information, see vignettes fitting individual models additional parameters. .$doubleSigmoidalModel: parameters double-sigmoidal fit. information, see vignettes fitting individual models additional parameters. .$decisionProcess: results decision process two models fit data better. information, see vignette categorizing fits. .$summaryVector: Key parameters winning model. important parameters extracted either .$sigmoidalModel .$doubleSigmoidalModel. contents summary vector follows: parameters defined vignette additional parameters.","code":"names(fitObj) ## [1] \"normalizedInput\"      \"sigmoidalModel\"       \"doubleSigmoidalModel\" ## [4] \"decisionProcess\"      \"summaryVector\" str(fitObj$summaryVector) ## List of 21 ##  $ dataInputName          : logi NA ##  $ decision               : chr \"double_sigmoidal\" ##  $ maximum_x              : num 11.1 ##  $ maximum_y              : num 4.14 ##  $ midPoint1_x            : num 6.92 ##  $ midPoint1_y            : num 2.07 ##  $ midPoint2_x            : num 15 ##  $ midPoint2_y            : num 2.71 ##  $ slope1                 : num 1.05 ##  $ slope2                 : num -0.775 ##  $ finalAsymptoteIntensity: num 1.28 ##  $ incrementTime          : num 3.94 ##  $ startPoint_x           : num 4.95 ##  $ startPoint_y           : num 0 ##  $ reachMaximum_x         : num 8.89 ##  $ reachMaximum_y         : num 4.14 ##  $ decrementTime          : num 3.69 ##  $ startDeclinePoint_x    : num 13.2 ##  $ startDeclinePoint_y    : num 4.14 ##  $ endDeclinePoint_x      : num 16.9 ##  $ endDeclinePoint_y      : num 1.28"},{"path":"https://hardin47.github.io/sicegar/articles/plotting_fitted_models.html","id":"plotting-the-data","dir":"Articles","previous_headings":"","what":"Plotting the data","title":"Plotting the fitted models","text":"demonstrate figure generation, first generate simulated sigmoidal double-sigmoidal data fit respective models datasets. Now can plot results using function figureModelCurves(). default function assumes lower asymptote (x negative infinity) zero, argument use_h0 = TRUE can used estimate lower asymptote. function returns ggplot2 plot can saved displayed directly. function several different options. First, can plot raw input data.","code":"# simulate sigmoidal data time <- seq(1, 24, 0.5)  noise_parameter <- 0.1 intensity_noise <- runif(n = length(time), min = 0, max = 1) * noise_parameter intensity <- sigmoidalFitFormula(time, maximum = 4, slope = 1, midPoint = 8) intensity <- intensity + intensity_noise dataInputSigmoidal <- data.frame(intensity = intensity, time = time)  # simulate double-sigmoidal data noise_parameter <- 0.2 intensity_noise <- runif(n = length(time), min = 0, max = 1) * noise_parameter intensity <- doublesigmoidalFitFormula(time,                                     finalAsymptoteIntensityRatio = .3,                                     maximum = 4,                                     slope1 = 1,                                     midPoint1Param = 7,                                     slope2 = 1,                                     midPointDistanceParam = 8) intensity <- intensity + intensity_noise dataInputDoubleSigmoidal <- data.frame(intensity = intensity, time = time)  # fit models to both datasets fitObj_sm <- fitAndCategorize(dataInput = dataInputSigmoidal) fitObj_dsm <- fitAndCategorize(dataInput = dataInputDoubleSigmoidal) # sigmoidal raw data only figureModelCurves(dataInput = fitObj_sm$normalizedInput) # double-sigmoidal raw data only figureModelCurves(dataInput = fitObj_dsm$normalizedInput)"},{"path":"https://hardin47.github.io/sicegar/articles/plotting_fitted_models.html","id":"plotting-the-model-onto-the-data","dir":"Articles","previous_headings":"","what":"Plotting the model onto the data","title":"Plotting the fitted models","text":"Second, can plot input data fitted lines.","code":"# sigmoidal fit figureModelCurves(dataInput = fitObj_sm$normalizedInput,                   sigmoidalFitVector = fitObj_sm$sigmoidalModel) # double-sigmoidal fit figureModelCurves(dataInput = fitObj_dsm$normalizedInput,                   doubleSigmoidalFitVector = fitObj_dsm$doubleSigmoidalModel)"},{"path":"https://hardin47.github.io/sicegar/articles/plotting_fitted_models.html","id":"adding-the-parameter-estimates-to-the-model","dir":"Articles","previous_headings":"","what":"Adding the parameter estimates to the model","title":"Plotting the fitted models","text":"Third, can additionally visualize parameter estimates, setting showParameterRelatedLines = TRUE.   Note last example works models additional parameters calculated using parameterCalculation(). done automatically fitting fitFunction(), needs done manually fitting multipleFitFunction().","code":"# sigmoidal fit with parameter related lines figureModelCurves(dataInput = fitObj_sm$normalizedInput,                   sigmoidalFitVector = fitObj_sm$sigmoidalModel,                   showParameterRelatedLines = TRUE) # double-sigmoidal fit with parameter related lines figureModelCurves(dataInput = fitObj_dsm$normalizedInput,                   doubleSigmoidalFitVector = fitObj_dsm$doubleSigmoidalModel,                   showParameterRelatedLines = TRUE)"},{"path":"https://hardin47.github.io/sicegar/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Johanna Hardin. Author, maintainer. Samuel Butler. Author. Phineus Choi. Author. Thomas Matheis. Author. M. Umut Caglar. Author. Claus O. Wilke. Author.","code":""},{"path":"https://hardin47.github.io/sicegar/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Caglar MU, Teufel AI, Wilke CO. 2018. Sicegar: R package sigmoidal double-sigmoidal curve fitting. PeerJ 6:e4251 https://doi.org/10.7717/peerj.4251","code":"@Article{,   title = {Sicegar: {R} package for sigmoidal and double-sigmoidal curve fitting},   author = {M. Umut Caglar and Ashley I. Teufel and Claus O. Wilke},   year = {2018},   journal = {PeerJ},   volume = {6},   pages = {e4251},   doi = {10.7717/peerj.4251}, }"},{"path":"https://hardin47.github.io/sicegar/index.html","id":"r-package-sicegar","dir":"","previous_headings":"","what":"Analysis of Single-Cell Viral Growth Curves","title":"Analysis of Single-Cell Viral Growth Curves","text":"Originally written M. Umut Caglar Claus O. Wilke. Updates current maintenance Jo Hardin, Sam Butler, Phineus Choi, Tommy Matheis. package aims quantify time intensity data using sigmoidal double sigmoidal curves. fits sigmoidal double sigmoidal curves time vs intensity data. fits used make decision model (sigmoidal, double sigmoidal, signal, ambiguous) best describes data. signal means intensity reach high enough point change time. Sigmoidal means intensity starts small number climbs maximum. Double sigmoidal means intensity starts small number, climbs maximum starts decay. decision reached, algorithm returns parameters associated sigmoidal double-sigmoidal model quantifying time-intensity curve. package name stands “SIngle CEll Growth Analysis R”. CRAN: https://cran.r-project.org/package=sicegar Source: https://github.com/hardin47/sicegar","code":""},{"path":"https://hardin47.github.io/sicegar/reference/Categorize_h0.html","id":null,"dir":"Reference","previous_headings":"","what":"Decide between Sigmoidal and Double-Sigmoidal Fits — Categorize_h0","title":"Decide between Sigmoidal and Double-Sigmoidal Fits — Categorize_h0","text":"Runs series logical AIC‐based tests choose best model (“sigmoidal”, “double_sigmoidal”, “no_signal” “ambiguous”) given two fitted parameter vectors (one sigmoidal, one double-sigmoidal).","code":""},{"path":"https://hardin47.github.io/sicegar/reference/Categorize_h0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decide between Sigmoidal and Double-Sigmoidal Fits — Categorize_h0","text":"","code":"Categorize_h0(   parameterVectorSigmoidal,   parameterVectorDoubleSigmoidal,   threshold_intensity_range = 0.1,   threshold_minimum_for_intensity_maximum = 0.3,   threshold_bonus_sigmoidal_AIC = 0,   threshold_sm_tmax_IntensityRatio = 0.75,   threshold_dsm_tmax_IntensityRatio = 0.75,   threshold_AIC = -10,   threshold_t0_max_int = 0.05,   showDetails = FALSE )"},{"path":"https://hardin47.github.io/sicegar/reference/Categorize_h0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decide between Sigmoidal and Double-Sigmoidal Fits — Categorize_h0","text":"parameterVectorSigmoidal named list data frame sigmoidal fit parameters, produced sigFit parameterCalculation_h0. parameterVectorDoubleSigmoidal named list data.frame double-sigmoidal fit parameters, produced sigFit2 parameterCalculation_h0. threshold_intensity_range Numeric; minimum required intensity range consider signal (default 0.1). threshold_minimum_for_intensity_maximum Numeric; minimum maximum intensity required consider real signal (default 0.3). threshold_bonus_sigmoidal_AIC Numeric; AIC bonus given sigmoidal model comparing double-sigmoidal (default 0). threshold_sm_tmax_IntensityRatio Numeric; minimum fraction maximum intensity reached sigmoidal final time allow sigmoidal (default 0.85). threshold_dsm_tmax_IntensityRatio Numeric; maximum fraction maximum intensity reached double-sigmoidal final time allow double-sigmoidal (default 0.75). threshold_AIC Numeric; maximum AIC value allow either model (default –10). threshold_t0_max_int Numeric; maximum allowed starting intensity ratio time zero (default 0.05). showDetails Logical; TRUE, prints internal decision list structure debugging (default FALSE).","code":""},{"path":"https://hardin47.github.io/sicegar/reference/Categorize_h0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decide between Sigmoidal and Double-Sigmoidal Fits — Categorize_h0","text":"named list components: decisionList intermediate TRUE/FALSE tests thresholds. decision One “no_signal”, “sigmoidal”, “double_sigmoidal” “ambiguous”. decisonSteps numbered tests applied (single string).","code":""},{"path":"https://hardin47.github.io/sicegar/reference/categorize.html","id":null,"dir":"Reference","previous_headings":"","what":"Categorize input data by comparing the AIC values of the three fitted models. — categorize","title":"Categorize input data by comparing the AIC values of the three fitted models. — categorize","text":"Catagorizes input data using results two model fitsand chosen thresholds.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/categorize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Categorize input data by comparing the AIC values of the three fitted models. — categorize","text":"","code":"categorize(   parameterVectorSigmoidal,   parameterVectorDoubleSigmoidal,   threshold_intensity_range = 0.1,   threshold_minimum_for_intensity_maximum = 0.3,   threshold_bonus_sigmoidal_AIC = 0,   threshold_sm_tmax_IntensityRatio = 0.75,   threshold_dsm_tmax_IntensityRatio = 0.75,   threshold_AIC = -10,   threshold_t0_max_int = 0.05,   showDetails = FALSE )"},{"path":"https://hardin47.github.io/sicegar/reference/categorize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Categorize input data by comparing the AIC values of the three fitted models. — categorize","text":"parameterVectorSigmoidal Output sigmoidalFitFunction. parameterVectorDoubleSigmoidal Output doublesigmoidalFitFunction. threshold_intensity_range Minimum intensity range, .e. lower limit allowed difference maximum minimum intensities (Default 0.1, values based actual, rescaled data.). threshold_minimum_for_intensity_maximum Minimum allowed value intensity maximum. (Default 0.3, values based actual, rescaled data.). threshold_bonus_sigmoidal_AIC Bonus AIC points sigmoidal fit. Negative values help sigmoidal model win. helps competition sigmoidal double sigmoidal fit decision step \"9\", .e. none models fail tests stay candidate last step (Default 0). threshold_sm_tmax_IntensityRatio threshold minimum intensity ratio last observed time points intensity theoretical maximum intensity sigmoidal curve. value threshold, data can represented sigmoidal model. (Default 0.85) threshold_dsm_tmax_IntensityRatio threshold minimum intensity ratio last observed time points intensity maximum intensity double sigmoidal curve.  value threshold, data can represented double sigmoidal model. (Default 0.75) threshold_AIC Maximum AIC values order meaningful fit (Default -10). threshold_t0_max_int Maximum allowed intensity fitted curve time equal zero (t=0). (Default 0.05, values based actual, rescaled data.). showDetails Logical chose want see details . Default \"FALSE\"","code":""},{"path":"https://hardin47.github.io/sicegar/reference/categorize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Categorize input data by comparing the AIC values of the three fitted models. — categorize","text":"returned object contains extensive information decision process, key component decision variable. decision variable can one following four; \"no_signal\", \"infection\",\"infection&lysis\" \"ambugious\".","code":""},{"path":"https://hardin47.github.io/sicegar/reference/categorize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Categorize input data by comparing the AIC values of the three fitted models. — categorize","text":"","code":"# Example 1 with double sigmoidal data time=seq(1, 24, 0.1)  #simulate intensity data and add noise noise_parameter <- 0.2 intensity_noise <- runif(n = length(time), min = 0, max = 1) * noise_parameter intensity <- sicegar::doublesigmoidalFitFormula(time,                                                finalAsymptoteIntensityRatio = .3,                                                maximum = 4,                                                slope1Param = 1,                                                midPoint1Param = 7,                                                slope2Param = 1,                                                midPointDistanceParam = 8) intensity <- intensity + intensity_noise  dataInput <- data.frame(intensity = intensity, time = time) normalizedInput <- sicegar::normalizeData(dataInput,                                          dataInputName = \"sample001\")   # Fit sigmoidal model sigmoidalModel <- sicegar::multipleFitFunction(dataInput = normalizedInput,                                               model = \"sigmoidal\",                                               n_runs_min = 20,                                               n_runs_max = 500,                                               showDetails = FALSE)  # Fit double sigmoidal model doubleSigmoidalModel <- sicegar::multipleFitFunction(dataInput = normalizedInput,                                                     model = \"doublesigmoidal\",                                                     n_runs_min = 20,                                                     n_runs_max = 500,                                                     showDetails = FALSE)   # Calculate additional parameters sigmoidalModel <- sicegar::parameterCalculation(sigmoidalModel) doubleSigmoidalModel <- sicegar::parameterCalculation(doubleSigmoidalModel)  outputCluster <- sicegar::categorize(parameterVectorSigmoidal = sigmoidalModel,                                     parameterVectorDoubleSigmoidal = doubleSigmoidalModel)  utils::str(outputCluster) #> List of 40 #>  $ test.name                               : logi TRUE #>  $ dataInputName                           : chr \"sample001\" #>  $ test.sm_modelCheck                      : logi TRUE #>  $ test.dsm_modelCheck                     : logi TRUE #>  $ test.dataScalingParameters              : logi TRUE #>  $ intensityMaximum                        : num 4.16 #>  $ threshold_minimum_for_intensity_maximum : num 0.3 #>  $ test.minimum_for_intensity_maximum      : logi TRUE #>  $ intensityRange                          : num 4.15 #>  $ threshold_intensity_range               : num 0.1 #>  $ test.intensity_range                    : logi TRUE #>  $ test.sigmoidalFit                       : logi TRUE #>  $ test.doublesigmoidalFit                 : logi TRUE #>  $ test.sigmoidalAdditionalParameters      : logi TRUE #>  $ test.doublesigmoidalAdditionalParameters: logi TRUE #>  $ threshold_AIC                           : num -10 #>  $ sigmoidalAIC                            : num -4.51 #>  $ test.sigmoidalAIC                       : logi FALSE #>  $ doublesigmoidalAIC                      : num -1283 #>  $ test.doublesigmoidalAIC                 : logi TRUE #>  $ dsm_maximum_x                           : num 11.1 #>  $ timeRange                               : num 24 #>  $ test.dsm_maximum_x                      : logi TRUE #>  $ sm_tmax_IntensityRatio                  : num 1 #>  $ threshold_sm_tmax_IntensityRatio        : num 0.75 #>  $ test.sm_tmax_IntensityRatio             : logi TRUE #>  $ dsm_tmax_IntensityRatio                 : num 0.314 #>  $ threshold_dsm_tmax_IntensityRatio       : num 0.75 #>  $ test.dsm_tmax_IntensityRatio            : logi TRUE #>  $ sm_startPoint_x                         : num 4.76 #>  $ test.sm_startPoint_x                    : logi TRUE #>  $ dsm_startPoint_x                        : num 4.81 #>  $ test.dsm_startPoint_x                   : logi TRUE #>  $ sm_startIntensity                       : num 6.79e-05 #>  $ threshold_t0_max_int                    : num 0.05 #>  $ test.sm_startIntensity                  : logi TRUE #>  $ dsm_startIntensity                      : num 0.00708 #>  $ test.dsm_startIntensity                 : logi TRUE #>  $ decisonSteps                            : chr \"1c_3a_8\" #>  $ decision                                : chr \"double_sigmoidal\""},{"path":"https://hardin47.github.io/sicegar/reference/dataCheck.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if data is in correct format. — dataCheck","title":"Checks if data is in correct format. — dataCheck","text":"Checks input data appropriate , function converts suitable form. input data frame contain two columns named time intensity related time variable intensity variable respectively. data frame list name list $timeIntensityData.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/dataCheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if data is in correct format. — dataCheck","text":"","code":"dataCheck(data, showDetails = TRUE)"},{"path":"https://hardin47.github.io/sicegar/reference/dataCheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if data is in correct format. — dataCheck","text":"data input data. can either list contains data frame .$timeIntensityData can data frame . showDetails logical, TRUE function provide output \"check done\" everything OK. Default FALSE","code":""},{"path":"https://hardin47.github.io/sicegar/reference/dataCheck.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks if data is in correct format. — dataCheck","text":"","code":"# Example 1  # generate data frame time <- seq(1, 48, 0.5) intensity <- runif(length(time), 3.0, 7.5) dataInput <- data.frame(time, intensity)  # Apply dataCheck function dataOutputVariable <- dataCheck(dataInput)  # Example 2  # generate data frame time <- seq(1, 48, 0.5) intensity <- runif(length(time), 3.0, 7.5) dataInput <- data.frame(time, intensity)  # Normalize Data dataOutput <- normalizeData(dataInput) dataInput2 <- dataOutput  # Apply dataCheck function dataOutputVariable2 <- dataCheck(dataInput2)"},{"path":"https://hardin47.github.io/sicegar/reference/doubleSigmoidalFitFormula_h0.html","id":null,"dir":"Reference","previous_headings":"","what":"Double‐sigmoidal fit formula with baseline h0 — doubleSigmoidalFitFormula_h0","title":"Double‐sigmoidal fit formula with baseline h0 — doubleSigmoidalFitFormula_h0","text":"Evaluates full 5‐parameter “rise+fall” model `x`.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/doubleSigmoidalFitFormula_h0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double‐sigmoidal fit formula with baseline h0 — doubleSigmoidalFitFormula_h0","text":"","code":"doubleSigmoidalFitFormula_h0(   x,   finalAsymptoteIntensityRatio,   maximum,   slope1Param,   midPoint1Param,   slope2Param,   midPointDistanceParam,   h0 )"},{"path":"https://hardin47.github.io/sicegar/reference/doubleSigmoidalFitFormula_h0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double‐sigmoidal fit formula with baseline h0 — doubleSigmoidalFitFormula_h0","text":"x Numeric vector. finalAsymptoteIntensityRatio Ratio second plateau first. maximum Maximum plateau height. slope1Param First slope (>0). midPoint1Param First midpoint (>0). slope2Param Second slope (>0). midPointDistanceParam Distance second midpoint (>0). h0 Baseline x negative infinity.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/doubleSigmoidalFitFormula_h0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double‐sigmoidal fit formula with baseline h0 — doubleSigmoidalFitFormula_h0","text":"Numeric vector length `x`.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/doublesigmoidalFitFormula.html","id":null,"dir":"Reference","previous_headings":"","what":"Double Sigmoidal Formula — doublesigmoidalFitFormula","title":"Double Sigmoidal Formula — doublesigmoidalFitFormula","text":"Calculates intensities using double-sigmoidal model fit parameters (maximum, final asymptote intensity, slope1Param, midpoint1Param, slope2Param, mid point distance).","code":""},{"path":"https://hardin47.github.io/sicegar/reference/doublesigmoidalFitFormula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double Sigmoidal Formula — doublesigmoidalFitFormula","text":"","code":"doublesigmoidalFitFormula(   x,   finalAsymptoteIntensityRatio,   maximum,   slope1Param,   midPoint1Param,   slope2Param,   midPointDistanceParam )"},{"path":"https://hardin47.github.io/sicegar/reference/doublesigmoidalFitFormula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double Sigmoidal Formula — doublesigmoidalFitFormula","text":"x \"time\" (time) column dataframe finalAsymptoteIntensityRatio ratio asymptote intensity maximum intensity fitted curve. maximum maximum intensity double sigmoidal function reach. slope1Param slope parameter sigmoidal function steppest point exponential phase viral production. midPoint1Param x axis value steppest point function. slope2Param slope parameter sigmoidal function steppest point lysis phase. .e intensity decreasing. midPointDistanceParam distance time steppest increase steppest decrease intensity data. words distance x axis values arguments slope1Param slope2Param.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/doublesigmoidalFitFormula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double Sigmoidal Formula — doublesigmoidalFitFormula","text":"Returns predicted intensities given time points double-sigmoidal fitted parameters double sigmoidal fit.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/doublesigmoidalFitFormula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double Sigmoidal Formula — doublesigmoidalFitFormula","text":"","code":"time <- seq(1, 24, 0.1)  #simulate intensity data and add noise noise_parameter <- 0.2 intensity_noise <- stats::runif(n = length(time), min = 0, max = 1) * noise_parameter intensity <- doublesigmoidalFitFormula(time,                                       finalAsymptoteIntensityRatio = .3,                                       maximum = 4,                                       slope1Param = 1,                                       midPoint1Param = 7,                                       slope2Param = 1,                                       midPointDistanceParam = 8) intensity <- intensity + intensity_noise  dataInput <- data.frame(intensity = intensity, time = time) normalizedInput <- normalizeData(dataInput) parameterVector <- doublesigmoidalFitFunction(normalizedInput, tryCounter = 2)   #Check the results if(parameterVector$isThisaFit){  intensityTheoretical <-        doublesigmoidalFitFormula(                time,                finalAsymptoteIntensityRatio = parameterVector$finalAsymptoteIntensityRatio_Estimate,                maximum = parameterVector$maximum_Estimate,                slope1Param = parameterVector$slope1Param_Estimate,                midPoint1Param = parameterVector$midPoint1Param_Estimate,                slope2Param = parameterVector$slope2Param_Estimate,                midPointDistanceParam = parameterVector$midPointDistanceParam_Estimate)   comparisonData <- cbind(dataInput, intensityTheoretical)   require(ggplot2)  ggplot(comparisonData) +    geom_point(aes(x = time, y = intensity)) +    geom_line(aes(x = time, y = intensityTheoretical)) +    expand_limits(x = 0, y = 0)    } #> Loading required package: ggplot2   if(!parameterVector$isThisaFit){   print(parameterVector)   }"},{"path":"https://hardin47.github.io/sicegar/reference/doublesigmoidalFitFunction.html","id":null,"dir":"Reference","previous_headings":"","what":"Double sigmoidal fit function. — doublesigmoidalFitFunction","title":"Double sigmoidal fit function. — doublesigmoidalFitFunction","text":"function fits double sigmoidal curve given data using likelihood maximization (LM) algorithm provides parameters (maximum, final asymptote intensity, slope1Param, midpoint1Param, slope2Param, midpoint distance) describing double-sigmoidal fit output. also contains information goodness fits AIC, BIC, residual sum squares, log likelihood.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/doublesigmoidalFitFunction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double sigmoidal fit function. — doublesigmoidalFitFunction","text":"","code":"doublesigmoidalFitFunction(   dataInput,   tryCounter,   startList = list(finalAsymptoteIntensityRatio = 0, maximum = 1, slope1Param = 1,     midPoint1Param = 0.33, slope2Param = 1, midPointDistanceParam = 0.29),   lowerBounds = c(finalAsymptoteIntensityRatio = 0, maximum = 0.3, slope1Param = 0.01,     midPoint1Param = -0.52, slope2Param = 0.01, midPointDistanceParam = 0.04),   upperBounds = c(finalAsymptoteIntensityRatio = 1, maximum = 1.5, slope1Param = 180,     midPoint1Param = 1.15, slope2Param = 180, midPointDistanceParam = 0.63),   min_Factor = 1/2^20,   n_iterations = 1000 )"},{"path":"https://hardin47.github.io/sicegar/reference/doublesigmoidalFitFunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double sigmoidal fit function. — doublesigmoidalFitFunction","text":"dataInput data frame list contatining dataframe. data frame composed least two columns. One represents time, represents intensity. data normalized normalize data function sicegar::normalizeData() imported function. tryCounter counter shows number times data fit via maximum likelihood function. startList initial set parameters vector algorithm tries first fit attempt relevant parameters. vector composes six elements; 'finalAsymptoteIntensityRatio', 'maximum', 'slope1Param', 'midPoint1Param' , 'slope2Param', 'midPointDistanceParam'. Detailed explanations parameters can found vignettes. Defaults  finalAsymptoteIntensityRatio = 0, maximum = 1, slope1Param = 1, midPoint1Param = 0.33, slope2Param = 1, midPointDistanceParam=0.29. numbers normalized time intensity scale. lowerBounds lower bounds randomly generated start parameters.  vector composes six elements; 'finalAsymptoteIntensityRatio', 'maximum', 'slope1Param', 'midPoint1Param' , 'slope2Param', 'midPointDistanceParam'. Detailed explanations parameters can found vignettes. Defaults finalAsymptoteIntensityRatio = 0, maximum = 0.3, slope1Param = .01, midPoint1Param = -0.52, slope2Param = .01, midPointDistanceParam = 0.04. numbers normalized time intensity scale. upperBounds upper bounds randomly generated start parameters.  vector composes six elements; 'finalAsymptoteIntensityRatio', 'maximum', 'slope1Param', 'midPoint1Param' , 'slope2Param', 'midPointDistanceParam'. Detailed explanations parameters can found vignettes. Defaults finalAsymptoteIntensityRatio = 1, maximum = 1.5, slope1Param = 180, midPoint1Param = 1.15, slope2Param = 180, midPointDistanceParam = 0.63. numbers normalized time intensity scale. min_Factor Defines minimum step size used fitting algorithm. Default 1/2^20. n_iterations Define maximum number iterations used fitting algorithm. Default 1000","code":""},{"path":"https://hardin47.github.io/sicegar/reference/doublesigmoidalFitFunction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double sigmoidal fit function. — doublesigmoidalFitFunction","text":"Returns fitted parameters goodness fit metrics.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/doublesigmoidalFitFunction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double sigmoidal fit function. — doublesigmoidalFitFunction","text":"","code":"time=seq(1, 24, 0.1)  #simulate intensity data and add noise noise_parameter <- 0.2 intensity_noise <- stats::runif(n = length(time), min = 0, max = 1) * noise_parameter intensity <- doublesigmoidalFitFormula(time,                                      finalAsymptoteIntensityRatio = .3,                                      maximum = 4,                                      slope1Param = 1,                                      midPoint1Param = 7,                                      slope2Param = 1,                                      midPointDistanceParam = 8) intensity <- intensity + intensity_noise  dataInput <- data.frame(intensity = intensity, time = time) normalizedInput <- normalizeData(dataInput) parameterVector <- doublesigmoidalFitFunction(normalizedInput, tryCounter = 2)   #Check the results if(parameterVector$isThisaFit){     intensityTheoretical <-          doublesigmoidalFitFormula(              time,              finalAsymptoteIntensityRatio = parameterVector$finalAsymptoteIntensityRatio_Estimate,              maximum = parameterVector$maximum_Estimate,              slope1Param = parameterVector$slope1Param_Estimate,              midPoint1Param = parameterVector$midPoint1Param_Estimate,              slope2Param = parameterVector$slope2Param_Estimate,              midPointDistanceParam = parameterVector$midPointDistanceParam_Estimate)   comparisonData <- cbind(dataInput, intensityTheoretical)   require(ggplot2)  ggplot(comparisonData) +    geom_point(aes(x = time, y = intensity)) +    geom_line(aes(x = time, y = intensityTheoretical)) +    expand_limits(x = 0, y = 0)}   if(!parameterVector$isThisaFit) {print(parameterVector)}"},{"path":"https://hardin47.github.io/sicegar/reference/f0.html","id":null,"dir":"Reference","previous_headings":"","what":"Double‐sigmoidal base function — f0","title":"Double‐sigmoidal base function — f0","text":"helper “base” function used internally double‐sigmoidal fit formula.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/f0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double‐sigmoidal base function — f0","text":"","code":"f0(x, B1, M1, B2, L)"},{"path":"https://hardin47.github.io/sicegar/reference/f0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double‐sigmoidal base function — f0","text":"x Numeric vector time points. B1 Positive slope parameter first rise. M1 Midpoint first rise. B2 Positive slope parameter second fall. L Distance two midpoints.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/f0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double‐sigmoidal base function — f0","text":"Numeric vector length `x`.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/f1.html","id":null,"dir":"Reference","previous_headings":"","what":"Log‐transformed Double‐Sigmoidal Core Function — f1","title":"Log‐transformed Double‐Sigmoidal Core Function — f1","text":"Computes log core double‐sigmoidal form used   optimizing peak time.  function internal fitAndCategorize parameter   calculation.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/f1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log‐transformed Double‐Sigmoidal Core Function — f1","text":"","code":"f1(x, B1, M1, B2, L)"},{"path":"https://hardin47.github.io/sicegar/reference/f1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log‐transformed Double‐Sigmoidal Core Function — f1","text":"x Numeric vector time points. B1 Numeric; slope rising phase. M1 Numeric; midpoint rising phase. B2 Numeric; absolute slope declining phase. L Numeric; distance two steepest points.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/f1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log‐transformed Double‐Sigmoidal Core Function — f1","text":"Numeric vector log(1/((1+e^{-B1(x-M1)})*(1+e^{B2(x-(M1+L))}))).","code":""},{"path":"https://hardin47.github.io/sicegar/reference/f2_h0.html","id":null,"dir":"Reference","previous_headings":"","what":"Heaviside Piecewise double‐sigmoidal — f2_h0","title":"Heaviside Piecewise double‐sigmoidal — f2_h0","text":"Internal helper stitches together two scaled copies `f0()` switch point.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/f2_h0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heaviside Piecewise double‐sigmoidal — f2_h0","text":"","code":"f2_h0(x, A2, Ka, B1, M1, B2, L, const, argument, h0)"},{"path":"https://hardin47.github.io/sicegar/reference/f2_h0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heaviside Piecewise double‐sigmoidal — f2_h0","text":"x Numeric vector time points. A2 Final asymptote ratio. Ka Maximum plateau height. B1 First slope (see `f0()`). M1 First midpoint. B2 Second slope. L Midpoint distance. const Normalizing constant (value `f0()` peak). argument Switch point x‐axis. h0 Baseline intensity.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/f2_h0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heaviside Piecewise double‐sigmoidal — f2_h0","text":"Numeric vector length `x`.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/f_argmax_doublesigmoidal_h0.html","id":null,"dir":"Reference","previous_headings":"","what":"Argmax for Double‐Sigmoidal Peak Time — f_argmax_doublesigmoidal_h0","title":"Argmax for Double‐Sigmoidal Peak Time — f_argmax_doublesigmoidal_h0","text":"Finds time (within scaled range) fitted   double‐sigmoidal curve reaches maximum.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/f_argmax_doublesigmoidal_h0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Argmax for Double‐Sigmoidal Peak Time — f_argmax_doublesigmoidal_h0","text":"","code":"f_argmax_doublesigmoidal_h0(parameterVector)"},{"path":"https://hardin47.github.io/sicegar/reference/f_argmax_doublesigmoidal_h0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Argmax for Double‐Sigmoidal Peak Time — f_argmax_doublesigmoidal_h0","text":"parameterVector named list data frame containing: slope1Param_N_Estimate Rising slope (raw). slope2Param_N_Estimate Declining slope (raw). midPoint1Param_N_Estimate Rising midpoint (raw). midPointDistanceParam_N_Estimate Distance midpoints (raw). dataScalingParameters.timeRange Total time range scaling factor.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/f_argmax_doublesigmoidal_h0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Argmax for Double‐Sigmoidal Peak Time — f_argmax_doublesigmoidal_h0","text":"Numeric scalar: time (original units) curve’s peak.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/f_mid1_doublesigmoidal_h0.html","id":null,"dir":"Reference","previous_headings":"","what":"Find First Half-Maximum Point of Double-Sigmoidal Fit — f_mid1_doublesigmoidal_h0","title":"Find First Half-Maximum Point of Double-Sigmoidal Fit — f_mid1_doublesigmoidal_h0","text":"Given parameter data frame double-sigmoidal fit, finds first time point (x) model reaches half maximum response solving root mid-point equation.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/f_mid1_doublesigmoidal_h0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find First Half-Maximum Point of Double-Sigmoidal Fit — f_mid1_doublesigmoidal_h0","text":"","code":"f_mid1_doublesigmoidal_h0(parameterDf)"},{"path":"https://hardin47.github.io/sicegar/reference/f_mid1_doublesigmoidal_h0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find First Half-Maximum Point of Double-Sigmoidal Fit — f_mid1_doublesigmoidal_h0","text":"parameterDf data.frame list containing least: - `dataScalingParameters.timeRange` - `slope1Param_Estimate` - `midPoint1Param_Estimate` - `slope2Param_Estimate` - `midPointDistanceParam_Estimate`","code":""},{"path":"https://hardin47.github.io/sicegar/reference/f_mid1_doublesigmoidal_h0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find First Half-Maximum Point of Double-Sigmoidal Fit — f_mid1_doublesigmoidal_h0","text":"numeric scalar giving time first half-maximum point.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/f_mid2_doublesigmoidal_h0.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Second Half-Maximum Point of Double-Sigmoidal Fit — f_mid2_doublesigmoidal_h0","title":"Find Second Half-Maximum Point of Double-Sigmoidal Fit — f_mid2_doublesigmoidal_h0","text":"double-sigmoidal fit, locates time response declines back half-maximum, root-finding mid-point function interval peak beyond original time range.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/f_mid2_doublesigmoidal_h0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Second Half-Maximum Point of Double-Sigmoidal Fit — f_mid2_doublesigmoidal_h0","text":"","code":"f_mid2_doublesigmoidal_h0(parameterDf)"},{"path":"https://hardin47.github.io/sicegar/reference/f_mid2_doublesigmoidal_h0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Second Half-Maximum Point of Double-Sigmoidal Fit — f_mid2_doublesigmoidal_h0","text":"parameterDf data.frame list containing fields f_mid1_doublesigmoidal_h0(), including dataScalingParameters.timeRange.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/f_mid2_doublesigmoidal_h0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Second Half-Maximum Point of Double-Sigmoidal Fit — f_mid2_doublesigmoidal_h0","text":"numeric scalar giving time second half-maximum point.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/f_slope_doublesigmoidal_h0.html","id":null,"dir":"Reference","previous_headings":"","what":"Numerical Slope for Double‐Sigmoidal at a Given Time — f_slope_doublesigmoidal_h0","title":"Numerical Slope for Double‐Sigmoidal at a Given Time — f_slope_doublesigmoidal_h0","text":"Approximates first derivative fitted   double‐sigmoidal curve time x using 5‐point stencil.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/f_slope_doublesigmoidal_h0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numerical Slope for Double‐Sigmoidal at a Given Time — f_slope_doublesigmoidal_h0","text":"","code":"f_slope_doublesigmoidal_h0(x, parameterDf, timeStep = 1e-05)"},{"path":"https://hardin47.github.io/sicegar/reference/f_slope_doublesigmoidal_h0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numerical Slope for Double‐Sigmoidal at a Given Time — f_slope_doublesigmoidal_h0","text":"x Numeric scalar; time point compute slope. parameterDf named list data frame fitted parameters, including: finalAsymptoteIntensityRatio_Estimate Final ratio. maximum_Estimate Maximum intensity. slope1Param_Estimate Rising slope parameter. midPoint1Param_Estimate Rising midpoint. slope2Param_Estimate Declining slope parameter. midPointDistanceParam_Estimate Distance midpoints. h0_Estimate Baseline intensity. timeStep Numeric; small increment used finite differences. Default 1e-05.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/f_slope_doublesigmoidal_h0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numerical Slope for Double‐Sigmoidal at a Given Time — f_slope_doublesigmoidal_h0","text":"Numeric scalar: approximate slope (dY/dX) x.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/figureModelCurves.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate model associated figures. — figureModelCurves","title":"Generate model associated figures. — figureModelCurves","text":"Generates figures using ggplot shows input data fitted curves.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/figureModelCurves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate model associated figures. — figureModelCurves","text":"","code":"figureModelCurves(   dataInput,   sigmoidalFitVector = NULL,   doubleSigmoidalFitVector = NULL,   showParameterRelatedLines = FALSE,   xlabelText = \"time\",   ylabelText = \"intensity\",   fittedXmin = 0,   fittedXmax = NA,   use_h0 = FALSE )"},{"path":"https://hardin47.github.io/sicegar/reference/figureModelCurves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate model associated figures. — figureModelCurves","text":"dataInput data frame list contatining dataframe. data frame composed least two columns. One represents time, represents intensity. data normalized normalize data function sicegar::normalizeData() imported function. sigmoidalFitVector output sicegar::sigmoidalFitFunction(), augmented version output generated help sicegar::parameterCalculation(), contains parameters related sigmoidal model. Default NULL. doubleSigmoidalFitVector output sicegar::doubleSigmoidalFitFunction(), augmented version output generated help sicegar::parameterCalculation(), contains parameters related double sigmoidal model. Default NULL. showParameterRelatedLines equal TRUE, figure show parameter related lines curves. Default FALSE. xlabelText x-axis name; default \"time\" ylabelText y-axis name; default \"intensity\" fittedXmin minimum fitted data plotted (Default 0) fittedXmax maximum fitted data plotted (Default timeRange) use_h0 Boolean decides whether fix h0 0 (FALSE, default) freely estimate h0 (TRUE)","code":""},{"path":"https://hardin47.github.io/sicegar/reference/figureModelCurves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate model associated figures. — figureModelCurves","text":"Returns infection curve figures.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/figureModelCurves.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate model associated figures. — figureModelCurves","text":"","code":"# Example w/ h0 fixed at zero time <- seq(1, 24, 0.1)  #simulate intensity data and add noise noise_parameter <- 0.2 intensity_noise <- runif(n = length(time), min = 0, max = 1) * noise_parameter intensity <- sicegar::doublesigmoidalFitFormula(time,                                                finalAsymptoteIntensityRatio = .3,                                                maximum = 4,                                                slope1Param = 1,                                                midPoint1Param = 7,                                                slope2Param = 1,                                                midPointDistanceParam = 8) intensity <- intensity + intensity_noise  dataInput <- data.frame(intensity = intensity, time = time) normalizedInput <- sicegar::normalizeData(dataInput, dataInputName = \"sample001\")   # Double sigmoidal fit doubleSigmoidalModel <- sicegar::multipleFitFunction(dataInput = normalizedInput,                                                     model = \"doublesigmoidal\",                                                     n_runs_min = 20,                                                     n_runs_max = 500,                                                     showDetails = FALSE)  doubleSigmoidalModel <- sicegar::parameterCalculation(doubleSigmoidalModel)  fig01 <- sicegar::figureModelCurves(dataInput = normalizedInput,                                   doubleSigmoidalFitVector = doubleSigmoidalModel,                                   showParameterRelatedLines = TRUE) print(fig01)    # Example w/ h0 free # using the same data as above `dataInput`  normalizedInput <- sicegar::normalizeData_h0(dataInput, dataInputName = \"sample001\")   # Double sigmoidal fit doubleSigmoidalModel <- sicegar::multipleFitFunction_h0(dataInput = normalizedInput,                                                     model = \"doublesigmoidal\",                                                     n_runs_min = 20,                                                     n_runs_max = 500,                                                     showDetails = FALSE)  doubleSigmoidalModel <- sicegar::parameterCalculation_h0(doubleSigmoidalModel)  fig02 <- sicegar::figureModelCurves(dataInput = normalizedInput,                                   doubleSigmoidalFitVector = doubleSigmoidalModel,                                   showParameterRelatedLines = TRUE, use_h0 = TRUE) print(fig02)"},{"path":"https://hardin47.github.io/sicegar/reference/fitAndCategorize.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit and categorize. — fitAndCategorize","title":"Fit and categorize. — fitAndCategorize","text":"Fits sigmoidal double-sigmoidal models data categorizes data according model fits best.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/fitAndCategorize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit and categorize. — fitAndCategorize","text":"","code":"fitAndCategorize(   dataInput,   dataInputName = NA,   n_runs_min_sm = 20,   n_runs_max_sm = 500,   n_runs_min_dsm = 20,   n_runs_max_dsm = 500,   showDetails = FALSE,   startList_sm = list(h0 = 0, maximum = 1, slopeParam = 1, midPoint = 0.33),   lowerBounds_sm = c(h0 = 0, maximum = 0.3, slopeParam = 0.01, midPoint = -0.52),   upperBounds_sm = c(h0 = 0.3, maximum = 1.5, slopeParam = 180, midPoint = 1.15),   min_Factor_sm = 1/2^20,   n_iterations_sm = 1000,   startList_dsm = list(finalAsymptoteIntensityRatio = 0, maximum = 1, slope1Param = 1,     midPoint1Param = 0.33, slope2Param = 1, midPointDistanceParam = 0.29, h0 = 0),   lowerBounds_dsm = c(finalAsymptoteIntensityRatio = 0, maximum = 0.3, slope1Param =     0.01, midPoint1Param = -0.52, slope2Param = 0.01, midPointDistanceParam = 0.04, h0 =     0),   upperBounds_dsm = c(finalAsymptoteIntensityRatio = 1, maximum = 1.5, slope1Param = 180,     midPoint1Param = 1.15, slope2Param = 180, midPointDistanceParam = 0.63, h0 = 0),   min_Factor_dsm = 1/2^20,   n_iterations_dsm = 1000,   threshold_intensity_range = 0.1,   threshold_minimum_for_intensity_maximum = 0.3,   threshold_bonus_sigmoidal_AIC = 0,   threshold_sm_tmax_IntensityRatio = 0.75,   threshold_dsm_tmax_IntensityRatio = 0.75,   threshold_AIC = -10,   threshold_t0_max_int = 0.05,   stepSize = 1e-05,   use_h0 = FALSE,   ... )"},{"path":"https://hardin47.github.io/sicegar/reference/fitAndCategorize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit and categorize. — fitAndCategorize","text":"dataInput Un_normalized input data fitted transferred related functions dataInputName Name data set (Default 'NA'). n_runs_min_sm number indicates lower limit successful fitting attempts sigmoidal model. smaller upper limit fitting attempts (n_runs_max_sm). Default 20 n_runs_max_sm number indicates upper limit fitting attempts sigmoidal model. Default 500 n_runs_min_dsm number indicates lower limit successful fitting attempts double sigmoidal model. smaller upper limit fitting attempts (n_runs_max_dsm). Default 20 n_runs_max_dsm number indicates upper limit fitting attempts sigmoidal model double sigmoidal model. Default 500 showDetails Logical TRUE prints details intermediate steps individual fits (Default FALSE). startList_sm initial set parameters vector sigmoidal fit algorithm tries first fit attempt relevant parameters. vector composes three elements; 'maximum', 'slopeParam' , 'midPoint'.  Detailed explanations parameters can found vignettes. Defaults maximum = 1, slopeParam = 1 , midPoint = 0.33. numbers normalized time intensity scale. lowerBounds_sm lower bounds randomly generated start parameters sigmoidal fit. vector composes three elements; 'maximum', 'slopeParam' , 'midPoint'. Detailed explanations parameters can found vignettes. Defaults maximum = 0.3, slopeParam = 0.01, midPoint = -0.52. numbers normalized time intensity scale. upperBounds_sm upper bounds randomly generated start parameters sigmoidal fit. vector composes three elements; 'maximum', 'slopeParam' , 'midPoint'. Detailed explanations parameters can found vignettes. Defaults maximum = 1.5, slopeParam = 180,  midPoint = 1.15. numbers normalized time intensity scale. min_Factor_sm Defines Defines minimum step size used sigmoidal fit algorithm. Default 1/2^20. n_iterations_sm Defines maximum number iterations used sigmoidal fit algorithm. Default 1000 startList_dsm initial set parameters vector double sigmoidal fit algorithm tries first fit attempt relevant parameters. vector composes six elements; 'finalAsymptoteIntensityRatio', 'maximum', 'slope1Param', 'midPoint1Param' , 'slope2Param', 'midPointDistanceParam'. Detailed explanations parameters can found vignettes. Defaults  finalAsymptoteIntensityRatio = 0, maximum = 1, slope1Param = 1, midPoint1Param = 0.33, slope2Param = 1, midPointDistanceParam=0.29. numbers normalized time intensity scale. lowerBounds_dsm lower bounds randomly generated start parameters double sigmoidal fit.  vector composes six elements; 'finalAsymptoteIntensityRatio', 'maximum', 'slope1Param', 'midPoint1Param' , 'slope2Param', 'midPointDistanceParam'. Detailed explanations parameters can found vignettes. Defaults finalAsymptoteIntensityRatio = 0, maximum = 0.3, slope1Param = .01, midPoint1Param = -0.52, slope2Param = .01, midPointDistanceParam = 0.04. numbers normalized time intensity scale. upperBounds_dsm upper bounds randomly generated start parameters double sigmoidal fit.  vector composes six elements; 'finalAsymptoteIntensityRatio', 'maximum', 'slope1Param', 'midPoint1Param' , 'slope2Param', 'midPointDistanceParam'. Detailed explanations parameters can found vignettes. Defaults finalAsymptoteIntensityRatio = 1, maximum = 1.5, slope1Param = 180, midPoint1Param = 1.15, slope2Param = 180, midPointDistanceParam = 0.63. numbers normalized time intensity scale. min_Factor_dsm Defines minimum step size used double sigmoidal fit algorithm. Default 1/2^20. n_iterations_dsm Define maximum number iterations used double sigmoidal fit algorithm. Default 1000 threshold_intensity_range Minimum intensity range, .e. lower limit allowed difference maximum minimum intensities (Default 0.1, values based actual, rescaled data.). threshold_minimum_for_intensity_maximum Minimum allowed value intensity maximum. (Default 0.3, values based actual, rescaled data.). threshold_bonus_sigmoidal_AIC Bonus AIC points sigmoidal fit. Negative values help sigmoidal model win. helps competition sigmoidal double sigmoidal fit decision step \"9\", .e. none models fail tests stay candidate last step (Default 0). threshold_sm_tmax_IntensityRatio threshold minimum intensity ratio last observed time points intensity theoretical maximum intensity sigmoidal curve. value threshold, data can represented sigmoidal model. (Default 0.85) threshold_dsm_tmax_IntensityRatio threshold minimum intensity ratio last observed time points intensity maximum intensity double sigmoidal curve.  value threshold, data can represented double sigmoidal model. (Default 0.75) threshold_AIC Maximum AIC values order meaningful fit (Default -10). threshold_t0_max_int Maximum allowed intensity fitted curve time equal zero (t=0). (Default 0.05, values based actual, rescaled data.). stepSize Step size used fitting algorithm. Smaller numbers gave accurate results larger numbers, larger numbers gave results faster small numbers. default value 0.00001. use_h0 Boolean decides whether fix lower asymptote h0 0 (FALSE, default) freely estimate h0 (TRUE) ... arguments model functions (\"sigmoidalFitFunction\" , \"doublesigmoidalFitFunction\") may need.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/fitAndCategorize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit and categorize. — fitAndCategorize","text":"Returns parameters related curve fitted input data.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/fitAndCategorize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit and categorize. — fitAndCategorize","text":"","code":"# Example 1 (For h0 fixed at zero) time <- seq(1, 24, 0.5)  #simulate intensity data and add noise noise_parameter <- 0.2 intensity_noise <- stats::runif(n = length(time), min = 0, max = 1) * noise_parameter intensity <- sicegar::doublesigmoidalFitFormula(time,                                                finalAsymptoteIntensityRatio = .3,                                                maximum = 4,                                                slope1Param = 1,                                                midPoint1Param = 7,                                                slope2Param = 1,                                                midPointDistanceParam = 8) intensity <- intensity + intensity_noise  dataInput <- data.frame(intensity = intensity, time = time)  fitObj1 <- sicegar::fitAndCategorize(dataInput = dataInput)  # Example 2 (For free h0) # using the same data as above `dataInput`  fitObj2 <- sicegar::fitAndCategorize(dataInput = dataInput, use_h0 = TRUE)"},{"path":"https://hardin47.github.io/sicegar/reference/multipleFitFunction.html","id":null,"dir":"Reference","previous_headings":"","what":"multiple fit function. — multipleFitFunction","title":"multiple fit function. — multipleFitFunction","text":"Calls fitting algorithms fit data multiple times starting different randomly generated initial parameters run. Multiple attempts fitting data necessary avoid local minima.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/multipleFitFunction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"multiple fit function. — multipleFitFunction","text":"","code":"multipleFitFunction(   dataInput,   dataInputName = NA,   model,   n_runs_min = 20,   n_runs_max = 500,   showDetails = FALSE,   ... )"},{"path":"https://hardin47.github.io/sicegar/reference/multipleFitFunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"multiple fit function. — multipleFitFunction","text":"dataInput data frame list contatining dataframe. data frame composed least two columns. One represents time, represents intensity. data normalized normalize data function sicegar::normalizeData() imported function. dataInputName Name data set (Default 'NA'). model Type fit model used. Can \"sigmoidal\", \"double_sigmoidal\". n_runs_min number indicates lower limit successful fitting attempts. smaller upper limit fitting attempts (n_runs_max). Default 20. n_runs_max number indicates upper limit fitting attempts. Default 500. showDetails Logical TRUE prints details intermediate steps individual fits (Default FALSE). ... arguments model functions (\"sigmoidalFitFunction\" , \"doublesigmoidalFitFunction\") may need.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/multipleFitFunction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"multiple fit function. — multipleFitFunction","text":"Returns parameters related model fitted input data.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/multipleFitFunction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"multiple fit function. — multipleFitFunction","text":"","code":"# Example 1 (sigmoidal function with normalization) time <- seq(1, 24, 0.5)  #simulate intensity data and add noise noise_parameter <- 2.5 intensity_noise <- stats::runif(n = length(time), min = 0, max = 1) * noise_parameter intensity <- sigmoidalFitFormula(time, maximum = 4, slopeParam = 1, midPoint = 8) intensity <- intensity + intensity_noise  dataInput <- data.frame(intensity = intensity, time = time) normalizedInput <- normalizeData(dataInput, dataInputName = \"sample001\") parameterVector <- multipleFitFunction(dataInput = normalizedInput,                                       model = \"sigmoidal\",                                       n_runs_min = 20,                                       n_runs_max = 500)  #Check the results if(parameterVector$isThisaFit){   intensityTheoretical <- sigmoidalFitFormula(time,                             maximum = parameterVector$maximum_Estimate,                             slopeParam = parameterVector$slopeParam_Estimate,                             midPoint = parameterVector$midPoint_Estimate)   comparisonData <- cbind(dataInput, intensityTheoretical)   print(parameterVector$residual_Sum_of_Squares)   require(ggplot2)  ggplot(comparisonData)+    geom_point(aes(x = time, y = intensity)) +    geom_line(aes(x = time, y = intensityTheoretical), color = \"orange\") +    expand_limits(x = 0, y = 0) } #> [1] 0.6140231     if(!parameterVector$isThisaFit){   print(parameterVector) }  # Example 2 (doublesigmoidal function with normalization) time <- seq(1, 24, 0.1)  #simulate intensity data with noise noise_parameter <- 0.2 intensity_noise <- stats::runif(n = length(time), min = 0, max = 1) * noise_parameter intensity <- doublesigmoidalFitFormula(time,                                       finalAsymptoteIntensityRatio = .3,                                       maximum = 4,                                       slope1Param = 1,                                       midPoint1Param = 7,                                       slope2Param = 1,                                       midPointDistanceParam = 8) intensity <- intensity + intensity_noise  dataInput <- data.frame(intensity = intensity, time = time) normalizedInput <- normalizeData(dataInput) parameterVector <- multipleFitFunction(dataInput = normalizedInput,                            dataInputName=\"sample001\",                            model = \"doublesigmoidal\",                            n_runs_min = 20,                            n_runs_max = 500,                            showDetails = FALSE)   #Check the results if(parameterVector$isThisaFit){  intensityTheoretical <-        doublesigmoidalFitFormula(                time,                finalAsymptoteIntensityRatio = parameterVector$finalAsymptoteIntensityRatio_Estimate,                maximum = parameterVector$maximum_Estimate,                slope1Param = parameterVector$slope1Param_Estimate,                midPoint1Param = parameterVector$midPoint1Param_Estimate,                slope2Param = parameterVector$slope2Param_Estimate,                midPointDistanceParam = parameterVector$midPointDistanceParam_Estimate)   comparisonData <- cbind(dataInput, intensityTheoretical)   require(ggplot2)  ggplot(comparisonData) +    geom_point(aes(x = time, y = intensity)) +    geom_line(aes(x = time, y = intensityTheoretical), color = \"orange\") +    expand_limits(x = 0, y = 0)  }   if(!parameterVector$isThisaFit){   print(parameterVector)   }"},{"path":"https://hardin47.github.io/sicegar/reference/multipleFitFunction_h0.html","id":null,"dir":"Reference","previous_headings":"","what":"Run multiple fitting attempts and return the best sigmoidal or double‐sigmoidal fit — multipleFitFunction_h0","title":"Run multiple fitting attempts and return the best sigmoidal or double‐sigmoidal fit — multipleFitFunction_h0","text":"Performs repeated fits either sigmoidal double‐sigmoidal model dataset minimum number successful fits reached maximum number attempts exhausted.  Returns parameter vector best fit (lowest residual sum squares), together counts total successful runs.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/multipleFitFunction_h0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run multiple fitting attempts and return the best sigmoidal or double‐sigmoidal fit — multipleFitFunction_h0","text":"","code":"multipleFitFunction_h0(   dataInput,   dataInputName = NA,   model,   n_runs_min = 20,   n_runs_max = 500,   showDetails = FALSE,   ... )"},{"path":"https://hardin47.github.io/sicegar/reference/multipleFitFunction_h0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run multiple fitting attempts and return the best sigmoidal or double‐sigmoidal fit — multipleFitFunction_h0","text":"dataInput data frame (columns `time` `intensity`) list containing `timeIntensityData` optional `dataScalingParameters`.  See dataCheck details. dataInputName Optional name assign input dataset; used tracking/identification fitting multiple curves.  Defaults NA. model Character; either `\"sigmoidal\"` `\"doublesigmoidal\"`, indicating underlying model fit. n_runs_min Integer; minimum number *successful* fits perform stopping.  Defaults 20. n_runs_max Integer; maximum total number fitting attempts allowed. Defaults 500. showDetails Logical; TRUE, prints progress counters (best residual, number successful fits, etc.) successful fit.  Defaults FALSE. ... Additional arguments passed underlying fitting function: sigFit `model = \"sigmoidal\"`, sigFit2 `model = \"doublesigmoidal\"`.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/multipleFitFunction_h0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run multiple fitting attempts and return the best sigmoidal or double‐sigmoidal fit — multipleFitFunction_h0","text":"named list (invisibly) components:   * fit parameters goodness‐‐fit metrics best run,   * betterFit: count times new best residual found,   * correctFit: count successful fits,   * totalFit: total number attempts made.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/multipleFitFunction_h0.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run multiple fitting attempts and return the best sigmoidal or double‐sigmoidal fit — multipleFitFunction_h0","text":"","code":"if (FALSE) { # \\dontrun{ # single‐sigmoidal over noisy data, require at least 10 good fits res <- multipleFitFunction_h0(   dataInput    = my_data,   model        = \"sigmoidal\",   n_runs_min   = 10,   n_runs_max   = 200 ) plot(res$time, res$intensity, type = \"l\") } # }"},{"path":"https://hardin47.github.io/sicegar/reference/normalizeData.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalization of given data — normalizeData","title":"Normalization of given data — normalizeData","text":"Maps given time-intensity data rescaled data frame time scaled way maximum time point one intensity distributed [0,1].","code":""},{"path":"https://hardin47.github.io/sicegar/reference/normalizeData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalization of given data — normalizeData","text":"","code":"normalizeData(dataInput, dataInputName = NA)"},{"path":"https://hardin47.github.io/sicegar/reference/normalizeData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalization of given data — normalizeData","text":"dataInput data frame list contatining dataframe. data frame composed least two columns. One represents time, represents intensity. dataInputName experiment name (Default 'NA').","code":""},{"path":"https://hardin47.github.io/sicegar/reference/normalizeData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalization of given data — normalizeData","text":"Function returns new data frame, scaling factors scaling constants connects initial data frame new one. new data frame includes 2 columns one normalized time noralized intensity. whole time distributed 0 1 similarly whole intensity distributed 0 1. time intensity constants scaling factors parameters transform data unnormalized data frame normalized data frame.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/normalizeData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalization of given data — normalizeData","text":"","code":"# generateRandomData time <- seq(1, 48, 0.5) intensity <- runif(length(time), 3.0, 7.5) dataInput <- data.frame(time, intensity)  # Normalize Data dataOutput <- normalizeData(dataInput, dataInputName=\"sample001\")"},{"path":"https://hardin47.github.io/sicegar/reference/normalizeData_h0.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize Time–Intensity Data to [0,1] Range — normalizeData_h0","title":"Normalize Time–Intensity Data to [0,1] Range — normalizeData_h0","text":"Scales two-column data frame raw time intensity values time runs 0 1 intensity runs 0 1.  Returns normalized data scaling parameters needed reverse transform.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/normalizeData_h0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize Time–Intensity Data to [0,1] Range — normalizeData_h0","text":"","code":"normalizeData_h0(dataInput, dataInputName = NA)"},{"path":"https://hardin47.github.io/sicegar/reference/normalizeData_h0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize Time–Intensity Data to [0,1] Range — normalizeData_h0","text":"dataInput data.frame numeric columns time intensity. dataInputName Optional character string giving name ID input dataset.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/normalizeData_h0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize Time–Intensity Data to [0,1] Range — normalizeData_h0","text":"list components: timeIntensityData data.frame normalized time     intensity [0,1]. dataScalingParameters numeric vector     timeRange, intensityMin, intensityMax,     intensityRange used normalization. dataInputName original dataInputName value.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/normalizeData_h0.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize Time–Intensity Data to [0,1] Range — normalizeData_h0","text":"","code":"df <- data.frame(time = 0:10, intensity = rnorm(11, 5, 2)) normalizeData_h0(df, dataInputName = \"example\") #> $timeIntensityData #>    time intensity #> 1   0.0 0.6884398 #> 2   0.1 0.5502616 #> 3   0.2 0.4000806 #> 4   0.3 0.6933685 #> 5   0.4 0.2398069 #> 6   0.5 0.4193797 #> 7   0.6 0.0000000 #> 8   0.7 1.0000000 #> 9   0.8 0.7170917 #> 10  0.9 0.6395355 #> 11  1.0 0.6095586 #>  #> $dataScalingParameters #>      timeRange   intensityMin   intensityMax intensityRange  #>      10.000000       2.240811       7.863136       5.622326  #>  #> $dataInputName #> [1] \"example\" #>"},{"path":"https://hardin47.github.io/sicegar/reference/parameterCalculation.html","id":null,"dir":"Reference","previous_headings":"","what":"useful paramter calculation with help of fits — parameterCalculation","title":"useful paramter calculation with help of fits — parameterCalculation","text":"Generates useful values external use, help parameterVector's fits.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/parameterCalculation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"useful paramter calculation with help of fits — parameterCalculation","text":"","code":"parameterCalculation(parameterVector, stepSize = 1e-05)"},{"path":"https://hardin47.github.io/sicegar/reference/parameterCalculation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"useful paramter calculation with help of fits — parameterCalculation","text":"parameterVector Output multiple fit function sicegar::multipleFitFunction() gives variables related sigmoidal double sigmoidal fit. stepSize Step size used fitting algorithm. Smaller numbers gave accurate results larger numbers, larger numbers gave results faster small numbers. default value 0.00001.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/parameterCalculation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"useful paramter calculation with help of fits — parameterCalculation","text":"Returns expanded parameter vector. vector includes useful derived values time intensity start point, addition standard values fit algorithms produce necessary define curves.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/parameterCalculation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"useful paramter calculation with help of fits — parameterCalculation","text":"","code":"time <- seq(1, 24, 0.1)  #simulate intensity data with noise noise_parameter <- 0.2 intensity_noise <- stats::runif(n = length(time), min = 0, max = 1) * noise_parameter intensity <- sicegar::doublesigmoidalFitFormula(time,                                             finalAsymptoteIntensityRatio = .3,                                             maximum = 4,                                             slope1Param = 1,                                             midPoint1Param = 7,                                             slope2Param = 1,                                             midPointDistanceParam = 8) intensity <- intensity+intensity_noise  dataInput <- data.frame(intensity = intensity, time = time) normalizedInput <- sicegar::normalizeData(dataInput) parameterVector <- sicegar::multipleFitFunction(dataInput = normalizedInput,                                             dataInputName = \"sample01\",                                             model = \"doublesigmoidal\",                                             n_runs_min = 20,                                             n_runs_max = 500,                                             showDetails = FALSE)  if(parameterVector$isThisaFit){        parameterVector <- sicegar::parameterCalculation(parameterVector) }  print(t(parameterVector)) #>                                          [,1]              #> finalAsymptoteIntensityRatio_N_Estimate  \"0.3038072\"       #> finalAsymptoteIntensityRatio_Std_Error   \"0.002237478\"     #> finalAsymptoteIntensityRatio_t_value     \"135.7811\"        #> finalAsymptoteIntensityRatio_Pr_t        \"7.362399e-218\"   #> maximum_N_Estimate                       \"0.9812152\"       #> maximum_Std_Error                        \"0.002565215\"     #> maximum_t_value                          \"382.5079\"        #> maximum_Pr_t                             \"1.503323e-318\"   #> slope1Param_N_Estimate                   \"23.6693\"         #> slope1Param_Std_Error                    \"0.3017369\"       #> slope1Param_t_value                      \"78.4435\"         #> slope1Param_Pr_t                         \"2.107121e-165\"   #> midPoint1Param_N_Estimate                \"0.2914295\"       #> midPoint1Param_Std_Error                 \"0.0007028794\"    #> midPoint1Param_t_value                   \"414.6224\"        #> midPoint1Param_Pr_t                      \"0\"               #> slope2Param_N_Estimate                   \"23.73166\"        #> slope2Param_Std_Error                    \"0.4621653\"       #> slope2Param_t_value                      \"51.34885\"        #> slope2Param_Pr_t                         \"3.113324e-126\"   #> midPointDistanceParam_N_Estimate         \"0.3322909\"       #> midPointDistanceParam_Std_Error          \"0.001429118\"     #> midPointDistanceParam_t_value            \"232.5147\"        #> midPointDistanceParam_Pr_t               \"4.926404e-270\"   #> residual_Sum_of_Squares                  \"0.04576409\"      #> log_likelihood                           \"657.056\"         #> AIC_value                                \"-1300.112\"       #> BIC_value                                \"-1276.015\"       #> isThisaFit                               \"TRUE\"            #> startVector.finalAsymptoteIntensityRatio \"0.9046085\"       #> startVector.maximum                      \"0.6700916\"       #> startVector.slope1Param                  \"125.3329\"        #> startVector.midPoint1Param               \"0.1428656\"       #> startVector.slope2Param                  \"14.94412\"        #> startVector.midPointDistanceParam        \"0.5320635\"       #> dataScalingParameters.timeRange          \"24\"              #> dataScalingParameters.intensityMin       \"0.06192063\"      #> dataScalingParameters.intensityMax       \"4.193228\"        #> dataScalingParameters.intensityRange     \"4.131308\"        #> model                                    \"doublesigmoidal\" #> additionalParameters                     \"TRUE\"            #> finalAsymptoteIntensityRatio_Estimate    \"0.3038072\"       #> maximum_Estimate                         \"4.115623\"        #> slope1Param_Estimate                     \"0.9862208\"       #> midPoint1Param_Estimate                  \"6.994309\"        #> slope2Param_Estimate                     \"0.988819\"        #> midPointDistanceParam_Estimate           \"7.974981\"        #> dataInputName                            \"sample01\"        #> betterFit                                \"4\"               #> correctFit                               \"20\"              #> totalFit                                 \"41\"              #> maximum_x                                \"10.98569\"        #> maximum_y                                \"4.115623\"        #> midPoint1_x                              \"6.918146\"        #> midPoint1_y                              \"2.057811\"        #> midPoint2_x                              \"15.04524\"        #> midPoint2_y                              \"2.682989\"        #> slope1                                   \"1.05211\"         #> slope2                                   \"-0.7343884\"      #> finalAsymptoteIntensity                  \"1.250356\"        #> incrementTime                            \"3.911779\"        #> startPoint_x                             \"4.962257\"        #> startPoint_y                             \"0\"               #> reachMaximum_x                           \"8.874036\"        #> reachMaximum_y                           \"4.115623\"        #> decrementTime                            \"3.901569\"        #> startDeclinePoint_x                      \"13.09445\"        #> startDeclinePoint_y                      \"4.115623\"        #> endDeclinePoint_x                        \"16.99602\"        #> endDeclinePoint_y                        \"1.250356\""},{"path":"https://hardin47.github.io/sicegar/reference/parameterCalculation_h0.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Intuitively Meaningful Curve Parameters — parameterCalculation_h0","title":"Compute Intuitively Meaningful Curve Parameters — parameterCalculation_h0","text":"raw fit vector either sigmoidal double‐sigmoidal   model, calculates intuitively interpretable quantities (e.g. peak times,   slopes midpoints, plateau heights) appends parameter list.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/parameterCalculation_h0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Intuitively Meaningful Curve Parameters — parameterCalculation_h0","text":"","code":"parameterCalculation_h0(parameterVector, stepSize = 1e-05)"},{"path":"https://hardin47.github.io/sicegar/reference/parameterCalculation_h0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Intuitively Meaningful Curve Parameters — parameterCalculation_h0","text":"parameterVector named list data frame produced sigFit sigFit2, containing minimum: model Either “sigmoidal” “doublesigmoidal”. *_Estimate Raw parameter estimates (renormalized back original scale). dataScalingParameters.timeRange,         dataScalingParameters.intensityRange,         dataScalingParameters.intensityMin Scaling parameters used normalize/de‐normalize data. stepSize Numeric; finite‐difference increment slope calculation. Default 1e-05.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/parameterCalculation_h0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Intuitively Meaningful Curve Parameters — parameterCalculation_h0","text":"input parameterVector, augmented new fields:   sigmoidal: midPoint_x, midPoint_y, slope, etc.;   double‐sigmoidal: maximum_x, midPoint1_x, slope1,   finalAsymptoteIntensity, etc.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/preCategorize.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks for signal in the data. — preCategorize","title":"Checks for signal in the data. — preCategorize","text":"Checks signal present data. Often high percentage high -put data contain signal. Checking data contain signal sigmoidal double sigmoidal fit can make analysis data high-throughput experiments much faster.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/preCategorize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks for signal in the data. — preCategorize","text":"","code":"preCategorize(   normalizedInput,   threshold_intensity_range = 0.1,   threshold_minimum_for_intensity_maximum = 0.3 )"},{"path":"https://hardin47.github.io/sicegar/reference/preCategorize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks for signal in the data. — preCategorize","text":"normalizedInput output sicegar::normalizeData() function. threshold_intensity_range minimum intensity range, .e. lower limit allowed difference maximum minimum intensities (Default 0.1, values based actual, rescaled data.). threshold_minimum_for_intensity_maximum minimum allowed value intensity maximum. (Default 0.3, values based actual, rescaled data.).","code":""},{"path":"https://hardin47.github.io/sicegar/reference/preCategorize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks for signal in the data. — preCategorize","text":"Function returns brief decision list includes information decision process. Post important part information decisionList$decisionwhich might either \"no_signal\" \"not_no_signal\".","code":""},{"path":"https://hardin47.github.io/sicegar/reference/preCategorize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks for signal in the data. — preCategorize","text":"","code":"# Example 1 with double sigmoidal data  time=seq(1, 24, 0.1)  #simulate intensity data and add noise noise_parameter = 0.2 intensity_noise = runif(n = length(time), min = 0, max = 1) * noise_parameter intensity = sicegar::doublesigmoidalFitFormula(time,                                               finalAsymptoteIntensityRatio = .3,                                               maximum = 4,                                               slope1Param = 1,                                               midPoint1Param = 7,                                               slope2Param = 1,                                               midPointDistanceParam = 8) intensity <- intensity + intensity_noise  dataInput <- data.frame(intensity = intensity, time = time) normalizedInput <- sicegar::normalizeData(dataInput, dataInputName = \"sample001\") isThis_nosignal <- sicegar::preCategorize(normalizedInput = normalizedInput)    # Example 2 with no_signal data  time <- seq(1, 24, 0.1)  #simulate intensity data and add noise noise_parameter <- 0.05 intensity_noise <- runif(n = length(time), min = 0, max = 1) * noise_parameter * 2e-04 intensity <- sicegar::doublesigmoidalFitFormula(time,                                                finalAsymptoteIntensityRatio = .3,                                                maximum = 2e-04,                                                slope1Param = 1,                                                midPoint1Param = 7,                                                slope2Param = 1,                                                midPointDistanceParam = 8) intensity <- intensity + intensity_noise  dataInput <- data.frame(intensity=intensity, time=time) normalizedInput <- sicegar::normalizeData(dataInput,dataInputName = \"sample001\") isThis_nosignal <- sicegar::preCategorize(normalizedInput = normalizedInput)"},{"path":"https://hardin47.github.io/sicegar/reference/preCategorize_h0.html","id":null,"dir":"Reference","previous_headings":"","what":"Preliminary Categorization of Signal Presence — preCategorize_h0","title":"Preliminary Categorization of Signal Presence — preCategorize_h0","text":"Conducts first screening step normalized time–intensity data decide whether signal worth fitting, based intensity range maximum thresholds.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/preCategorize_h0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preliminary Categorization of Signal Presence — preCategorize_h0","text":"","code":"preCategorize_h0(   normalizedInput,   threshold_intensity_range = 0.1,   threshold_minimum_for_intensity_maximum = 0.3 )"},{"path":"https://hardin47.github.io/sicegar/reference/preCategorize_h0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preliminary Categorization of Signal Presence — preCategorize_h0","text":"normalizedInput list returned normalizeData_h0, containing least fields: dataInputName Original name data input. dataScalingParameters list elements     intensityMax intensityRange. threshold_intensity_range Numeric scalar. Minimum fraction full intensity range must spanned consider dynamic change. Defaults 0.1. threshold_minimum_for_intensity_maximum Numeric scalar. Minimum fraction maximum intensity must exceeded consider signal. Defaults 0.3.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/preCategorize_h0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preliminary Categorization of Signal Presence — preCategorize_h0","text":"named list elements: dataInputName normalizedInput. intensityMaximum Observed maximum intensity data. test.minimum_for_intensity_maximum Logical; TRUE       intensityMaximum exceeds threshold_minimum_for_intensity_maximum. intensityRange Observed intensity range data. test.intensity_range Logical; TRUE       intensityRange exceeds threshold_intensity_range. decision Character; \"not_no_signal\" tests       pass, otherwise \"no_signal\". decisionSteps String summarizing sub-steps       triggered (e.g. \"1a_1b_1c\").","code":""},{"path":"https://hardin47.github.io/sicegar/reference/renormalizeParameters_h0.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert normalized min.pack estimated parameters back to raw scale (with h0) — renormalizeParameters_h0","title":"Convert normalized min.pack estimated parameters back to raw scale (with h0) — renormalizeParameters_h0","text":"Takes one‐row parameter data.frame “unscales” time‐normalized intensity‐normalized columns.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/renormalizeParameters_h0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert normalized min.pack estimated parameters back to raw scale (with h0) — renormalizeParameters_h0","text":"","code":"renormalizeParameters_h0(parameterDF, isalist)"},{"path":"https://hardin47.github.io/sicegar/reference/renormalizeParameters_h0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert normalized min.pack estimated parameters back to raw scale (with h0) — renormalizeParameters_h0","text":"parameterDF Data.frame columns `*_N_Estimate` `dataScalingParameters.*`. isalist Logical; `TRUE` input came list, otherwise already raw.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/renormalizeParameters_h0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert normalized min.pack estimated parameters back to raw scale (with h0) — renormalizeParameters_h0","text":"one‐row data.frame `*_Estimate` columns raw   scale (including `h0_Estimate`).","code":""},{"path":"https://hardin47.github.io/sicegar/reference/renormalizeParameters_h0.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert normalized min.pack estimated parameters back to raw scale (with h0) — renormalizeParameters_h0","text":"","code":"df <- data.frame(   model=\"doublesigmoidal\",   maximum_N_Estimate=1, finalAsymptoteIntensityRatio_N_Estimate = .5,   slope1Param_N_Estimate=1, midPoint1Param_N_Estimate = .3,   slope2Param_N_Estimate=1, midPointDistanceParam_N_Estimate = .2,   h0_N_Estimate = .1,   dataScalingParameters.timeRange = 100,   dataScalingParameters.intensityRange = 10,   dataScalingParameters.intensityMin = 0 ) renormalizeParameters_h0(df, isalist=TRUE) #>             model maximum_N_Estimate finalAsymptoteIntensityRatio_N_Estimate #> 1 doublesigmoidal                  1                                     0.5 #>   slope1Param_N_Estimate midPoint1Param_N_Estimate slope2Param_N_Estimate #> 1                      1                       0.3                      1 #>   midPointDistanceParam_N_Estimate h0_N_Estimate #> 1                              0.2           0.1 #>   dataScalingParameters.timeRange dataScalingParameters.intensityRange #> 1                             100                                   10 #>   dataScalingParameters.intensityMin finalAsymptoteIntensityRatio_Estimate #> 1                                  0                                   0.5 #>   maximum_Estimate slope1Param_Estimate midPoint1Param_Estimate #> 1               10                 0.01                      30 #>   slope2Param_Estimate midPointDistanceParam_Estimate h0_Estimate #> 1                 0.01                             20           1"},{"path":"https://hardin47.github.io/sicegar/reference/sameSourceDataCheck.html","id":null,"dir":"Reference","previous_headings":"","what":"Check is data came from the same source. — sameSourceDataCheck","title":"Check is data came from the same source. — sameSourceDataCheck","text":"Checks provided data models came source looking \".dataInputName\" columns inputs.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/sameSourceDataCheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check is data came from the same source. — sameSourceDataCheck","text":"","code":"sameSourceDataCheck(dataInput, sigmoidalFitVector, doubleSigmoidalFitVector)"},{"path":"https://hardin47.github.io/sicegar/reference/sameSourceDataCheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check is data came from the same source. — sameSourceDataCheck","text":"dataInput data frame composed two columns. One time intensity. normalized data generated normalizeData. sigmoidalFitVector output sigmoidalFitFunction. Default NULL. doubleSigmoidalFitVector output double sigmoidal fit function. Default NULL.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/sameSourceDataCheck.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check is data came from the same source. — sameSourceDataCheck","text":"Returns TRUE models can source, FALSE otherwise.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/sigFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a Sigmoidal Model via Non‐linear Least Squares — sigFit","title":"Fit a Sigmoidal Model via Non‐linear Least Squares — sigFit","text":"Attempt fit 4‐parameter sigmoidal curve baseline   using nlsLM. Multiple random restarts may used internally.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/sigFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a Sigmoidal Model via Non‐linear Least Squares — sigFit","text":"","code":"sigFit(   dataInput,   tryCounter,   startList = list(h0 = 0, maximum = 1, slopeParam = 1, midPoint = 0.33),   lowerBounds = c(h0 = 0, maximum = 0.3, slopeParam = 0.01, midPoint = -0.52),   upperBounds = c(h0 = 0.3, maximum = 1.5, slopeParam = 180, midPoint = 1.15),   min_Factor = 1/2^20,   n_iterations = 1000 )"},{"path":"https://hardin47.github.io/sicegar/reference/sigFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a Sigmoidal Model via Non‐linear Least Squares — sigFit","text":"dataInput Data frame named list containing columns time intensity. tryCounter Integer; greater 1, randomize starting values. startList Named list initial parameter values (h0, maximum, slopeParam, midPoint). lowerBounds Named numeric vector lower bounds parameter. upperBounds Named numeric vector upper bounds parameter. min_Factor Numeric; minimal step‐factor passed optimizer. n_iterations Integer; maximum iterations nlsLM.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/sigFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a Sigmoidal Model via Non‐linear Least Squares — sigFit","text":"Data frame parameter estimates fit diagnostics, including: *_N_Estimate Raw normalized estimates. *_Estimate Renormalized estimates original scale. residual_Sum_of_Squares, AIC_value, BIC_value Fit diagnostics: sum squared residuals, Akaike’s IC, Bayesian IC, etc. isThisaFit Logical indicating successful convergence.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/sigFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a Sigmoidal Model via Non‐linear Least Squares — sigFit","text":"","code":"df <- data.frame(time = seq(0, 100, 10),                  intensity = runif(11, 0, 10)) fit <- sigFit(df, tryCounter = 1)"},{"path":"https://hardin47.github.io/sicegar/reference/sigFit2.html","id":null,"dir":"Reference","previous_headings":"","what":"Double‐sigmoidal NLS fit (with baseline h0) — sigFit2","title":"Double‐sigmoidal NLS fit (with baseline h0) — sigFit2","text":"Fits `doubleSigmoidalFitFormula_h0()` `data.frame(time, intensity)` via `minpack.lm::nlsLM()`, appending h0 AIC/BIC.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/sigFit2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double‐sigmoidal NLS fit (with baseline h0) — sigFit2","text":"","code":"sigFit2(   dataInput,   tryCounter,   startList = list(finalAsymptoteIntensityRatio = 0.5, maximum = 1, slope1Param = 1,     midPoint1Param = 0.33, slope2Param = 1, midPointDistanceParam = 0.29, h0 = 0.1),   lowerBounds = c(finalAsymptoteIntensityRatio = 0, maximum = 0.3, slope1Param = 0.01,     midPoint1Param = -0.52, slope2Param = 0.01, midPointDistanceParam = 0.04, h0 = 0),   upperBounds = c(finalAsymptoteIntensityRatio = 1.5, maximum = 1.5, slope1Param = 180,     midPoint1Param = 1.15, slope2Param = 180, midPointDistanceParam = 0.63, h0 = 0.3),   min_Factor = 1/2^20,   n_iterations = 1000 )"},{"path":"https://hardin47.github.io/sicegar/reference/sigFit2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double‐sigmoidal NLS fit (with baseline h0) — sigFit2","text":"dataInput data.frame list `$timeIntensityData`. tryCounter Integer: random‐start iteration . startList Named list starting values (including h0). lowerBounds Named vector lower bounds. upperBounds Named vector upper bounds. min_Factor Passed `nlsLM()`. n_iterations Max iterations `nlsLM()`.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/sigFit2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double‐sigmoidal NLS fit (with baseline h0) — sigFit2","text":"one‐row data.frame estimates, fit‐statistics,   `h0_Estimate`.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalFitFormula.html","id":null,"dir":"Reference","previous_headings":"","what":"sigmoidalFitFormula — sigmoidalFitFormula","title":"sigmoidalFitFormula — sigmoidalFitFormula","text":"Calculates intesities given time points (x) using sigmoidal fit model parameters (maximum, slopeParam, midpoint).","code":""},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalFitFormula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sigmoidalFitFormula — sigmoidalFitFormula","text":"","code":"sigmoidalFitFormula(x, maximum, slopeParam, midPoint)"},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalFitFormula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sigmoidalFitFormula — sigmoidalFitFormula","text":"x \"time\" (time) column dataframe. maximum maximum intensity sigmoidal function can reach time approaches infinity. slopeParam slope parameter sigmoidal function steppest point. midPoint x axis value steppest point function.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalFitFormula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sigmoidalFitFormula — sigmoidalFitFormula","text":"Returns predicted intensities given time points given sigmoidal fit parameters.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalFitFormula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sigmoidalFitFormula — sigmoidalFitFormula","text":"","code":"time <- seq(1, 24, 0.5)  #simulate intensity data and add noise noise_parameter <- 0.1 intensity_noise <- stats::runif(n = length(time), min = 0, max = 1) * noise_parameter intensity <- sigmoidalFitFormula(time, maximum = 4, slopeParam = 1, midPoint = 8) intensity <- intensity + intensity_noise  dataInput <- data.frame(intensity = intensity, time = time) normalizedInput <- normalizeData(dataInput) parameterVector <- sigmoidalFitFunction(normalizedInput, tryCounter = 2)  #Check the results if(parameterVector$isThisaFit){  intensityTheoretical <- sigmoidalFitFormula(time,                                              maximum = parameterVector$maximum_Estimate,                                              slopeParam = parameterVector$slopeParam_Estimate,                                              midPoint = parameterVector$midPoint_Estimate)   comparisonData <- cbind(dataInput, intensityTheoretical)   require(ggplot2)  ggplot(comparisonData) +    geom_point(aes(x = time, y = intensity)) +    geom_line(aes(x = time, y = intensityTheoretical)) +    expand_limits(x = 0, y = 0) }   if(!parameterVector$isThisaFit){   print(parameterVector) }"},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalFitFormula_h0.html","id":null,"dir":"Reference","previous_headings":"","what":"Sigmoidal Fit Formula with Baseline — sigmoidalFitFormula_h0","title":"Sigmoidal Fit Formula with Baseline — sigmoidalFitFormula_h0","text":"Compute sigmoidal curve value given time points,   allowing nonzero baseline (h0).","code":""},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalFitFormula_h0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sigmoidal Fit Formula with Baseline — sigmoidalFitFormula_h0","text":"","code":"sigmoidalFitFormula_h0(x, maximum, slopeParam, midPoint, h0)"},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalFitFormula_h0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sigmoidal Fit Formula with Baseline — sigmoidalFitFormula_h0","text":"x Numeric vector time points. maximum Numeric; upper asymptote sigmoid. slopeParam Numeric; slope parameter (rate rise). midPoint Numeric; time sigmoid reaches halfway h0 maximum. h0 Numeric; lower asymptote (baseline) intensity.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalFitFormula_h0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sigmoidal Fit Formula with Baseline — sigmoidalFitFormula_h0","text":"Numeric vector model‐predicted intensities.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalFitFormula_h0.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sigmoidal Fit Formula with Baseline — sigmoidalFitFormula_h0","text":"","code":"time <- seq(0, 100, length.out = 50) y <- sigmoidalFitFormula_h0(time, maximum = 10, slopeParam = 0.1, midPoint = 50, h0 = 2)"},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalFitFunction.html","id":null,"dir":"Reference","previous_headings":"","what":"Sigmoidal fit function — sigmoidalFitFunction","title":"Sigmoidal fit function — sigmoidalFitFunction","text":"function fits sigmoidal curve given data using likelihood maximization (LM) algorithm provides parameters (maximum, slopeParam , midPoint) describing double-sigmoidal fit output. also contains information goodness fits AIC, BIC, residual sum squares, log likelihood.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalFitFunction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sigmoidal fit function — sigmoidalFitFunction","text":"","code":"sigmoidalFitFunction(   dataInput,   tryCounter,   startList = list(maximum = 1, slopeParam = 1, midPoint = 0.33),   lowerBounds = c(maximum = 0.3, slopeParam = 0.01, midPoint = -0.52),   upperBounds = c(maximum = 1.5, slopeParam = 180, midPoint = 1.15),   min_Factor = 1/2^20,   n_iterations = 1000 )"},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalFitFunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sigmoidal fit function — sigmoidalFitFunction","text":"dataInput data frame list contatining dataframe. data frame composed least two columns. One represents time, represents intensity. data normalized normalize data function sicegar::normalizeData() imported function. tryCounter counter shows number times data fit via maximum likelihood function. startList initial set parameters vector algorithm tries first fit attempt relevant parameters. vector composes three elements; 'maximum', 'slopeParam' , 'midPoint'.  Detailed explanations parameters can found vignettes. Defaults maximum = 1, slopeParam = 1 , midPoint = 0.33. numbers normalized time intensity scale. lowerBounds lower bounds randomly generated start parameters.  vector composes three elements; 'maximum', 'slopeParam' , 'midPoint'. Detailed explanations parameters can found vignettes. Defaults maximum = 0.3, slopeParam = 0.01, midPoint = -0.52. numbers normalized time intensity scale. upperBounds upper bounds randomly generated start parameters.  vector composes three elements; 'maximum', 'slopeParam' , 'midPoint'. Detailed explanations parameters can found vignettes. Defaults maximum = 1.5, slopeParam = 180,  midPoint = 1.15. numbers normalized time intensity scale. min_Factor Defines minimum step size used fitting algorithm. Default 1/2^20. n_iterations Defines maximum number iterations used fitting algorithm. Default 1000","code":""},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalFitFunction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sigmoidal fit function — sigmoidalFitFunction","text":"Returns fitted parameters sigmoidal model.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalFitFunction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sigmoidal fit function — sigmoidalFitFunction","text":"","code":"time <- seq(1, 24, 0.5)  #simulate intensity data and add noise noise_parameter <- 0.1 intensity_noise <- stats::runif(n = length(time), min = 0, max = 1) * noise_parameter intensity <- sigmoidalFitFormula(time, maximum = 4, slopeParam = 1, midPoint = 8) intensity <- intensity + intensity_noise  dataInput <- data.frame(intensity = intensity, time = time) normalizedInput <- normalizeData(dataInput) parameterVector <- sigmoidalFitFunction(normalizedInput, tryCounter = 2)  #Check the results if(parameterVector$isThisaFit){ intensityTheoretical <- sigmoidalFitFormula(time,                                            maximum = parameterVector$maximum_Estimate,                                            slopeParam = parameterVector$slopeParam_Estimate,                                            midPoint = parameterVector$midPoint_Estimate)  comparisonData <- cbind(dataInput, intensityTheoretical)  require(ggplot2) ggplot(comparisonData) +  geom_point(aes(x = time, y = intensity)) +  geom_line(aes(x = time, y = intensityTheoretical)) +  expand_limits(x = 0, y = 0) }   if(!parameterVector$isThisaFit){   print(parameterVector) }"},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalRenormalizeParameters_h0.html","id":null,"dir":"Reference","previous_headings":"","what":"Renormalize Sigmoidal Fit Parameters — sigmoidalRenormalizeParameters_h0","title":"Renormalize Sigmoidal Fit Parameters — sigmoidalRenormalizeParameters_h0","text":"Transform normalized parameter estimates back   original data scale, pass raw estimates unchanged.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalRenormalizeParameters_h0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Renormalize Sigmoidal Fit Parameters — sigmoidalRenormalizeParameters_h0","text":"","code":"sigmoidalRenormalizeParameters_h0(parameterDF, isalist)"},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalRenormalizeParameters_h0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Renormalize Sigmoidal Fit Parameters — sigmoidalRenormalizeParameters_h0","text":"parameterDF Data frame parameter estimates columns *_N_Estimate , present, dataScalingParameters.*. isalist Logical; TRUE parameterDF returned list‐based fit (needs renormalization), FALSE otherwise.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalRenormalizeParameters_h0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Renormalize Sigmoidal Fit Parameters — sigmoidalRenormalizeParameters_h0","text":"Data frame added overwritten columns   h0_Estimate, maximum_Estimate, slopeParam_Estimate,   midPoint_Estimate original scale.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/unnormalizeData.html","id":null,"dir":"Reference","previous_headings":"","what":"Unnormalization of given data — unnormalizeData","title":"Unnormalization of given data — unnormalizeData","text":"Maps given time-intensity data rescaled frame time [0,1] similarly intensity [0,1].","code":""},{"path":"https://hardin47.github.io/sicegar/reference/unnormalizeData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unnormalization of given data — unnormalizeData","text":"","code":"unnormalizeData(dataInput)"},{"path":"https://hardin47.github.io/sicegar/reference/unnormalizeData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unnormalization of given data — unnormalizeData","text":"dataInput list file composes two parts First part data unnormalized, data frame composed two columns. One time intensity Second part scaling parameters data vector three components. first one related time last two related intensity. second value represents min value intensity set. First third values represent difference max min value relevant column.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/unnormalizeData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unnormalization of given data — unnormalizeData","text":"Returns data frame, scaling factors scaling constants time intensity. data frame includes 2 columns one normalized time noralized intensity. whole time distributed 0 1 similarly whole intensity distributed 0 1. time intensity constants scaling factors parameters transform data given set scaled set.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/unnormalizeData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unnormalization of given data — unnormalizeData","text":"","code":"# generateRandomData time <- seq(1, 48, 0.5) intensity <- runif(length(time), 3.0, 7.5) dataInput <- data.frame(time, intensity) # Normalize Data dataOutput <- normalizeData(dataInput) dataInput2 <- dataOutput # Un Normalize it dataOutput2 <- unnormalizeData(dataInput2)"},{"path":"https://hardin47.github.io/sicegar/reference/unnormalizeData_h0.html","id":null,"dir":"Reference","previous_headings":"","what":"Unnormalize Time–Intensity Data — unnormalizeData_h0","title":"Unnormalize Time–Intensity Data — unnormalizeData_h0","text":"Reverses transformation applied normalizeData_h0, restoring raw time intensity values scaled data.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/unnormalizeData_h0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unnormalize Time–Intensity Data — unnormalizeData_h0","text":"","code":"unnormalizeData_h0(dataInput)"},{"path":"https://hardin47.github.io/sicegar/reference/unnormalizeData_h0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unnormalize Time–Intensity Data — unnormalizeData_h0","text":"dataInput list returned normalizeData_h0, containing timeIntensityData dataScalingParameters.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/unnormalizeData_h0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unnormalize Time–Intensity Data — unnormalizeData_h0","text":"list component: timeIntensityData data.frame original time     intensity values.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/unnormalizeData_h0.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unnormalize Time–Intensity Data — unnormalizeData_h0","text":"","code":"norm <- normalizeData_h0(data.frame(time=0:10, intensity=rnorm(11))) unnormalizeData_h0(norm) #> $timeIntensityData #>    time  intensity #> 1     0  0.2152101 #> 2     1  0.8003496 #> 3     2  0.7149330 #> 4     3 -0.3171712 #> 5     4 -2.2520451 #> 6     5  1.5052482 #> 7     6 -0.4191479 #> 8     7 -0.2081800 #> 9     8  1.0250086 #> 10    9 -2.1093522 #> 11   10  0.5811560 #>"}]
